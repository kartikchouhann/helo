current file in file ine main brach 
primary_vpc = {
  vpc_cidr = "10.150.0.0/16"
  vpc_name = "pulse-main-vpc"

  # VPC Peering will be deployed in the second iteration of VPC configuration
  vpc_peering = [
    # Requires acceptance of the peering in prod
    {
      pcx_name        = "pcx:vas-platform-default"
      peer_account_id = 221515991534
      peer_vpc_id     = "vpc-9cf2d0f9"
    },
    {
      pcx_name        = "pcx:integrations-vpc-prod"
      peer_account_id = 221515991534
      peer_vpc_id     = "vpc-0f237a5d1161f382e"
    },
  ]

  elastic_ips = [
    "eip-natgateway-az-2a",
    "eip-natgateway-az-2b",
    "eip-natgateway-az-2c",
    "eip-natgateway-az-2d",
  ]

  endpoints = {
    gateway = [
      "s3",
      "dynamodb",
    ]
    "interface" = []
  }

  nat_gateways = [
    {
      eip    = "eip-natgateway-az-2a"
      name   = "natgateway-az-2a-nat"
      subnet = "public-natgateway-az-2a-subnet"
    },
    {
      eip    = "eip-natgateway-az-2b"
      name   = "natgateway-az-2b-nat"
      subnet = "public-natgateway-az-2b-subnet"
    },
    {
      eip    = "eip-natgateway-az-2c"
      name   = "natgateway-az-2c-nat"
      subnet = "public-natgateway-az-2c-subnet"
    },
    {
      eip    = "eip-natgateway-az-2d"
      name   = "natgateway-az-2d-nat"
      subnet = "public-natgateway-az-2d-subnet"
    },
  ]

  route_tables = [
    {
      name = "public-natgateway-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target_type = "igw"
        },
      ]
    },
    {
      name = "public-alb-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target_type = "igw"
        },
        {
          destination = "172.31.0.0/23"
          target      = "pcx-0d1330e1a98164b77" # pulse-main-vpc:pcx:vas-platform-default
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-a and private-data-az-b subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-b and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-b and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-b and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ec2-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-ec2-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-ec2-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-ec2-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-lambda-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-lambda-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-lambda-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-lambda-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-database-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-database-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-database-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-database-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow EB to access private-data-az-a and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow eb to access private-data-az-a and private-data-az-b subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnet in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnet in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnet in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      # NLB, ALB, LB for EB allow traffic between AWS resources, no internet
      name = "private-alb-rt"
      routes = [
        { # Allow ALB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ALB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ALB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ALB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      # MongoDB? Migrate?
      name = "private-service-rt"
      routes = [
        { # Allow service to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow service to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow service to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow service to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name   = "private-tgw-subnet-az-2a-rt"
      routes = []
    },
    {
      name   = "private-tgw-subnet-az-2b-rt"
      routes = []
    },
    {
      name   = "private-tgw-subnet-az-2c-rt"
      routes = []
    },
    {
      name   = "private-tgw-subnet-az-2d-rt"
      routes = []
    },
    {
      name = "private-dms-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-dms-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-dms-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-dms-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    }
  ]

  subnets = [
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.0.0/22"
      name        = "private-ecs-az-2a-subnet-01"
      route_table = "private-ecs-subnet-az-2a-rt"
      nacl_rule   = "private-ecs"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.4.0/22"
      name        = "private-ecs-az-2b-subnet-01"
      route_table = "private-ecs-subnet-az-2b-rt"
      nacl_rule   = "private-ecs"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.8.0/22"
      name        = "private-ecs-az-2c-subnet-01"
      route_table = "private-ecs-subnet-az-2c-rt"
      nacl_rule   = "private-ecs"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.12.0/22"
      name        = "private-ecs-az-2d-subnet-01"
      route_table = "private-ecs-subnet-az-2d-rt"
      nacl_rule   = "private-ecs"
    },
    # 4 CIDR blocks reserved (10.150.16.0/22, 10.150.20.0/22, 10.150.24.0/22, 10.150.28.0/22)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.32.0/24"
      name        = "private-database-az-2a-subnet-01"
      route_table = "private-database-subnet-az-2a-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.33.0/24"
      name        = "private-database-az-2b-subnet-01"
      route_table = "private-database-subnet-az-2b-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.34.0/24"
      name        = "private-database-az-2c-subnet-01"
      route_table = "private-database-subnet-az-2c-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.35.0/24"
      name        = "private-database-az-2d-subnet-01"
      route_table = "private-database-subnet-az-2d-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.36.0/25"
      name        = "private-dms-az-2a-subnet-01"
      route_table = "private-dms-subnet-az-2a-rt"
      nacl_rule   = "private-dms"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.36.128/25"
      name        = "private-dms-az-2b-subnet-01"
      route_table = "private-dms-subnet-az-2b-rt"
      nacl_rule   = "private-dms"
    },
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.37.0/25"
      name        = "private-dms-az-2c-subnet-01"
      route_table = "private-dms-subnet-az-2c-rt"
      nacl_rule   = "private-dms"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.37.128/25"
      name        = "private-dms-az-2d-subnet-01"
      route_table = "private-dms-subnet-az-2d-rt"
      nacl_rule   = "private-dms"
    },
    # 4 CIDR blocks reserved (10.150.38.0/25, 10.150.38.128/25, 10.150.39.0/25, 10.150.39.128/25)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.40.0/24"
      name        = "private-ec2-az-2a-subnet-01"
      route_table = "private-ec2-subnet-az-2a-rt"
      nacl_rule   = "private-ec2"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.41.0/24"
      name        = "private-ec2-az-2b-subnet-01"
      route_table = "private-ec2-subnet-az-2b-rt"
      nacl_rule   = "private-ec2"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.42.0/24"
      name        = "private-ec2-az-2c-subnet-01"
      route_table = "private-ec2-subnet-az-2c-rt"
      nacl_rule   = "private-ec2"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.43.0/24"
      name        = "private-ec2-az-2d-subnet-01"
      route_table = "private-ec2-subnet-az-2d-rt"
      nacl_rule   = "private-ec2"
    },
    # 4 CIDR blocks reserved (10.150.44.0/24, 10.150.45.0/24, 10.150.46.0/24, 10.150.47.0/24)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.48.0/20"
      name        = "private-lambda-az-2a-subnet-01"
      route_table = "private-lambda-subnet-az-2a-rt"
      nacl_rule   = "private-lambda"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.64.0/20"
      name        = "private-lambda-az-2b-subnet-01"
      route_table = "private-lambda-subnet-az-2b-rt"
      nacl_rule   = "private-lambda"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.80.0/20"
      name        = "private-lambda-az-2c-subnet-01"
      route_table = "private-lambda-subnet-az-2c-rt"
      nacl_rule   = "private-lambda"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.96.0/20"
      name        = "private-lambda-az-2d-subnet-01"
      route_table = "private-lambda-subnet-az-2d-rt"
      nacl_rule   = "private-lambda"
    },
    # 4 CIDR blocks reserved (10.150.112.0/21, 10.150.120.0/21, 10.150.128.0/21, 10.150.136.0/21)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.144.0/25"
      name        = "private-beanstalk-az-2a-subnet-01"
      route_table = "private-beanstalk-subnet-az-2a-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.144.128/25"
      name        = "private-beanstalk-az-2b-subnet-01"
      route_table = "private-beanstalk-subnet-az-2b-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.145.0/25"
      name        = "private-beanstalk-az-2c-subnet-01"
      route_table = "private-beanstalk-subnet-az-2c-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.145.128/25"
      name        = "private-beanstalk-az-2d-subnet-01"
      route_table = "private-beanstalk-subnet-az-2d-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    # 4 CIDR blocks reserved (10.150.146.0/23, 10.150.148.0/23, 10.150.150.0/23, 10.150.152.0/23)
    # This subnets only has local access in his route table, no NG or IG present so no incoming or outgoing traffic for internet.
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.154.0/26"
      name        = "private-service-az-2a-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.154.64/26"
      name        = "private-service-az-2b-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.154.128/26"
      name        = "private-service-az-2c-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.154.192/26"
      name        = "private-service-az-2d-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    # 4 CIDR blocks reserved from 10.150.155.0 to 10.150.155.254
    # Used for internal ALBs.
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.155.0/26"
      name        = "private-alb-az-2a-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.155.64/26"
      name        = "private-alb-az-2b-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.155.128/26"
      name        = "private-alb-az-2c-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.155.192/26"
      name        = "private-alb-az-2d-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    # 4 CIDR blocks reserved 10.150.156.0/24 - 10.150.157.0/24 - 10.150.158.0/24 (AWS Network Firewall etc.)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.159.0/28"
      name        = "public-natgateway-az-2a-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.159.16/28"
      name        = "public-natgateway-az-2b-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.159.32/28"
      name        = "public-natgateway-az-2c-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.159.48/28"
      name        = "public-natgateway-az-2d-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    # 4 CIDR blocks reserved 10.150.159.64/28 - 10.150.159.80/28 - 10.150.159.96/28 - 10.150.159.112/28 - 10.150.159.128/25
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.160.0/24"
      name        = "public-alb-az-2a-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.161.0/24"
      name        = "public-alb-az-2b-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.162.0/24"
      name        = "public-alb-az-2c-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.163.0/24"
      name        = "public-alb-az-2d-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    # 4 CIDR blocks reserved (10.x.164.0/24, 10.x.165.0/24, 10.x.166.0/24, 10.x.167.0/24)
    # data-ec2 10.x.168.0/26, 10.x.168.64/26, 10.x.168.128/26, 10.x.168.192/26 - Internal EC2's that don't need internet access and talk to the DATABASE!
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.168.0/26"
      name        = "data-ec2-az-2a-subnet-01"
      route_table = "data-ec2-subnet-az-2a-rt"
      nacl_rule   = "data-ec2"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.168.64/26"
      name        = "data-ec2-az-2b-subnet-01"
      route_table = "data-ec2-subnet-az-2b-rt"
      nacl_rule   = "data-ec2"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.168.128/26"
      name        = "data-ec2-az-2c-subnet-01"
      route_table = "data-ec2-subnet-az-2c-rt"
      nacl_rule   = "data-ec2"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.168.192/26"
      name        = "data-ec2-az-2d-subnet-01"
      route_table = "data-ec2-subnet-az-2d-rt"
      nacl_rule   = "data-ec2"
    },
    # 4 CIDR blocks reserved (10.x.169.0 - 10.x.169.254)
    # tgw (10.x.170.0/28 - 10.x.170.64/28)
    # https://docs.aws.amazon.com/vpc/latest/tgw/tgw-best-design-practices.html?ssp=1&darkschemeovr=1
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.170.0/28"
      name        = "private-tgw-az-2a-subnet-01"
      route_table = "private-tgw-subnet-az-2a-rt"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.170.16/28"
      name        = "private-tgw-az-2b-subnet-01"
      route_table = "private-tgw-subnet-az-2b-rt"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.170.32/28"
      name        = "private-tgw-az-2c-subnet-01"
      route_table = "private-tgw-subnet-az-2c-rt"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.170.48/28"
      name        = "private-tgw-az-2d-subnet-01"
      route_table = "private-tgw-subnet-az-2d-rt"
    },
    # 4 CIDR blocks reserved (10.x.170.64 - 10.x.170.127)
    # data* 4 CIDR blocks reserved (10.x.172.0 - 10.x.179.255)
    # 4 CIDR blocks reserved (10.x.180.0 - 10.x.180.255)
  ]

  network_acls = [
    {
      name = "private-ecs"
      egress_rules = [
        { # Allow to call HTTPS to ECS for Internet services like Google, Raygun, etc. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow to use HTTP for AWS Network Operations. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 20
          from_port  = 80
          to_port    = 80
        },
        { # Allow ECS to call Redis databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 30
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow ECS to call SEQ.
          action     = "allow"
          cidr_block = "10.152.40.0/23"
          protocol   = "6"
          rule_no    = 40
          from_port  = 5341
          to_port    = 5341
        },
        { # Allow to call Secure SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 50
          from_port  = 587
          to_port    = 587
        },
        { # Allow to call SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 60
          from_port  = 25
          to_port    = 25
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics Subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 80
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for platform-prod subnets in az-a/b
          action     = "allow"
          cidr_block = "172.31.14.0/23" # 14.0, 15.0
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 130
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 150
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call MS SQL server. (genetics-sync UDS)
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 160
          from_port  = 1433
          to_port    = 1433
        },
        { # Allow ECS to call RDS MySQL databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 170
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow ECS to call RDS Postgres databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 180
          from_port  = 5432
          to_port    = 5432
        },
        { # Allow to call ephemeral ports to the VPC. (ALB/Lambda/ECS).
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow internal traffic to HTTP port from public ALBs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow internal traffic to HTTP port from public ALBs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 20
          from_port  = 5000
          to_port    = 5000
        },
        { # Allow to call ephemeral ports to the VPC. (ALB/Lambda/ECS).
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 32768
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-dms"
      egress_rules = [
        { # Allow https ports for S3 buckets.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Access for database in pulse-prod subnets.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 20
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics Subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 80
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for platform-prod subnets in az-a/b
          action     = "allow"
          cidr_block = "172.31.14.0/23"
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 130
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 150
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Ephemeral Ports to Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 160
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { #  Access from database in pulse-prod subnets.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Ephemeral Ports from Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 20
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Internet for AWS Services.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-database"
      egress_rules = [
        { # Allow ephemeral ports for ECS subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        },
        { # Allow ephemeral ports for EB subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 32768
          to_port    = 65535
        },
        { # Allow ephemeral ports for EC2 subnets. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2a (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.48.0/20"
          protocol   = "6"
          rule_no    = 1030
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2b. (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.64.0/20"
          protocol   = "6"
          rule_no    = 1040
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2c. (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.80.0/20"
          protocol   = "6"
          rule_no    = 1050
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2d. (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.96.0/20"
          protocol   = "6"
          rule_no    = 1060
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for dms.
          action     = "allow"
          cidr_block = "10.150.36.0/24"
          protocol   = "6"
          rule_no    = 1070
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow ECS networks to access redis.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 10
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow EB networks to access redis.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 20
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow EC2 to call Redis databases. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 30
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow VPN EC2 subnet to call MongoDB databases. (Rule: VPN can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 40
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet 2a to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.48.0/20"
          protocol   = "6"
          rule_no    = 50
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet 2b to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.64.0/20"
          protocol   = "6"
          rule_no    = 60
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet 2c to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.80.0/20"
          protocol   = "6"
          rule_no    = 70
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.96.0/20"
          protocol   = "6"
          rule_no    = 80
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow ECS networks to access MySQL.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow VPN EC2 subnet to call MySQL databases. (Rule: VPN can use MySQL)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow dms subnet to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.36.0/25"
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2a to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.48.0/20"
          protocol   = "6"
          rule_no    = 120
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2b to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.64.0/20"
          protocol   = "6"
          rule_no    = 130
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2c to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.80.0/20"
          protocol   = "6"
          rule_no    = 140
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2d to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.96.0/20"
          protocol   = "6"
          rule_no    = 150
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow ECS networks to access SQL server.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 160
          from_port  = 1433
          to_port    = 1433
        },
        { # Allow VPN EC2 subnet to call SQL databases. (Rule: VPN can use SQL)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 170
          from_port  = 1433
          to_port    = 1433
        }
      ]
    },
    {
      name = "private-ec2"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations. (We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow HTTP from EC2 Subnets for AWS Network Operations and VPN. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 20
          from_port  = 80
          to_port    = 80
        },
        { # Allow NTP ports to Internet for AWS Network Operations. (We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 30
          from_port  = 123
          to_port    = 123
        },
        { # Allow VPN EC2 to call Redis databases. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 40
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow VPN EC2 to call Mongo databases. (Rule: VPN can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 50
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow VPN EC2 to call RDS MySQL databases. (Rule: VPN can use RDS)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 60
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow VPN EC2 to call RDS Postgres databases. (Rule: VPN can use RDS)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 70
          from_port  = 5432
          to_port    = 5432
        },
        { # Allow ephemeral from EC2 Subnets for VPN.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        },
        { # Allow Ephemeral Ports to Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024
          to_port    = 65535
        },
        { #  Allow VPN EC2 to call RDS SQL databases. (Rule: VPN can use RDS)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 1433
          to_port    = 1433
        }
      ]
      ingress_rules = [
        { # Allow HTTP from EC2 Subnets for SEQ instance.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow RDP from EC2 Subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/22"
          protocol   = "6"
          rule_no    = 11
          from_port  = 3389
          to_port    = 3389
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from database subnets. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow Ephemeral Ports from Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 1024
          to_port    = 65535
        }
      ]
    },
    {
      name = "elastic-beanstalk"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow NTP ports to Internet for AWS Network Operations. (EB deployment requires)
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 20
          from_port  = 123
          to_port    = 123
        },
        {
          # Allow EB to call Redis databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 30
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow to call database ports in 2215 for platform-prod-aurora subnets in az-a/b.
          action     = "allow"
          cidr_block = "172.31.14.0/23" # 14.0, 15.0
          protocol   = "6"
          rule_no    = 40
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow EB to call SEQ.
          action     = "allow"
          cidr_block = "10.152.40.0/23"
          protocol   = "6"
          rule_no    = 50
          from_port  = 5341
          to_port    = 5341
        },
        { # Allow to access ephemeral ports to private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to public-albs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 1001
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow incoming HTTP ports from private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP ports from public-albs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 11
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP ports from private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 20
          from_port  = 5000
          to_port    = 5000
        },
        { # Allow incoming HTTPS ports from private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 30
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPS ports from public-albs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 31
          from_port  = 443
          to_port    = 443
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations. (Ports based on Linux atm).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-service"
      egress_rules = [
        { # Allow ephemeral ports to EC2.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to ECS.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 20
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to Lambda.
          action     = "allow"
          cidr_block = "10.150.0.0/17"
          protocol   = "6"
          rule_no    = 30
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 60
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 1024
          to_port    = 65535
        },
      ]
      ingress_rules = [
        { # Allow ephemeral ports from EC2.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from ECS.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 20
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Lambda.
          action     = "allow"
          cidr_block = "10.150.0.0/17"
          protocol   = "6"
          rule_no    = 30
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 60
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 1024
          to_port    = 65535
        },
      ]
    },
    {
      name = "private-alb"
      egress_rules = [
        { # Allow HTTP traffic to elastic-beanstalk subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow HTTP traffic to elastic-beanstalk subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 20
          from_port  = 5000
          to_port    = 5000
        },
        { # Allow HTTPs traffic to elastic-beanstalk subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 30
          from_port  = 443
          to_port    = 443
        },
        { # Allow internal HTTPs traffic to public ALBs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 40
          from_port  = 443
          to_port    = 443
        },
        { # Allow internal HTTPs traffic to ECS subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 50
          from_port  = 443
          to_port    = 443
        },
        { # Allow to access ephemeral ports to the VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 1001
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 1002
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 1003
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 1004
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow incoming HTTP traffic from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTPs traffic from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 20
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming ephemeral ports from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 11
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 12
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 13
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 14
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 21
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 22
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 23
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 24
          from_port  = 443
          to_port    = 443
        }
      ]
    },
    {
      name = "allow-everything"
      egress_rules = [
        { # NTP for EB deployments.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 1010
          from_port  = 123
          to_port    = 123
        },
        {
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 0
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # NTP for EB deployments.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 1010
          from_port  = 123
          to_port    = 123
        },
        {
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 0
          to_port    = 65535
        }
      ]
    },
    {
      name          = "default-deny"
      egress_rules  = []
      ingress_rules = []
    },
    {
      name = "data-ec2"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations. (We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow HTTP from EC2 Subnets for AWS Network Operations and VPN. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 20
          from_port  = 80
          to_port    = 80
        },
        { # Allow to call database ports in 2215 for platform-prod-aurora subnets in az-a/b.
          action     = "allow"
          cidr_block = "172.31.14.0/23" # 14.0, 15.0
          protocol   = "6"
          rule_no    = 30
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 60
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 130
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 150
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow ephemeral to EC2 Subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow ephemeral ports from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations. (Ports based on Linux atm).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024 # windows 1024-65535, linux 32768-65535
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-lambda"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow HTTP ports to private albs (JR).
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 11
          from_port  = 80
          to_port    = 80
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 20
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 30
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda to call Redis databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 60
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow Lambda to call Secure SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 70
          from_port  = 587
          to_port    = 587
        },
        { # Allow Lambda to call SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 80
          from_port  = 25
          to_port    = 25
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics Subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for platform-prod subnets in az-a/b
          action     = "allow"
          cidr_block = "172.31.14.0/23"
          protocol   = "6"
          rule_no    = 130
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow lambda to call Mongo databases. (Rule: VPN can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call ephemeral ports to the VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow ephemeral ports from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow incoming ephemeral ports from Internet for secrets manager etc..
          # TODO: Replace secrets manager with VPC endpoint!!
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024 # windows 1024-65535, linux 32768-65535
          to_port    = 65535
        },
      ]
    }
  ],
  flow_logs_kms_key_alias = "flow-logs"
}

update file by carlos src/terraform/pulse/networking/primary-vpc/prod.tfvars

primary_vpc = {
  vpc_cidr = "10.150.0.0/16"
  vpc_name = "pulse-main-vpc"

  # VPC Peering will be deployed in the second iteration of VPC configuration
  vpc_peering = [
    # Requires acceptance of the peering in prod
    {
      pcx_name        = "pcx:vas-platform-default"
      peer_account_id = 221515991534
      peer_vpc_id     = "vpc-9cf2d0f9"
    },
    {
      pcx_name        = "pcx:integrations-vpc-prod"
      peer_account_id = 221515991534
      peer_vpc_id     = "vpc-0f237a5d1161f382e"
    },
  ]

  elastic_ips = [
    "eip-natgateway-az-2a",
    "eip-natgateway-az-2b",
    "eip-natgateway-az-2c",
    "eip-natgateway-az-2d",
  ]

  endpoints = {
    gateway = [
      "s3",
      "dynamodb",
    ]
    "interface" = []
  }

  nat_gateways = [
    {
      eip    = "eip-natgateway-az-2a"
      name   = "natgateway-az-2a-nat"
      subnet = "public-natgateway-az-2a-subnet"
    },
    {
      eip    = "eip-natgateway-az-2b"
      name   = "natgateway-az-2b-nat"
      subnet = "public-natgateway-az-2b-subnet"
    },
    {
      eip    = "eip-natgateway-az-2c"
      name   = "natgateway-az-2c-nat"
      subnet = "public-natgateway-az-2c-subnet"
    },
    {
      eip    = "eip-natgateway-az-2d"
      name   = "natgateway-az-2d-nat"
      subnet = "public-natgateway-az-2d-subnet"
    },
  ]

  route_tables = [
    {
      name = "public-natgateway-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target_type = "igw"
        },
      ]
    },
    {
      name = "public-alb-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target_type = "igw"
        },
        {
          destination = "172.31.0.0/23"
          target      = "pcx-0d1330e1a98164b77" # pulse-main-vpc:pcx:vas-platform-default
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-a and private-data-az-b subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-b and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-b and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-b and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ec2-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-ec2-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-ec2-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-ec2-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-lambda-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access private-data-az-a/b (platform-aurora database) subnets in VAS Platform Default (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "	pcx-0d1330e1a98164b77"
          target_type = "pcx"
        }
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-lambda-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access private-data-az-a/b (platform-aurora database) subnets in VAS Platform Default (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "	pcx-0d1330e1a98164b77"
          target_type = "pcx"
        }
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-lambda-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access private-data-az-a/b (platform-aurora database) subnets in VAS Platform Default (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "	pcx-0d1330e1a98164b77"
          target_type = "pcx"
        }
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-lambda-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access private-data-az-a/b (platform-aurora database) subnets in VAS Platform Default (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "	pcx-0d1330e1a98164b77"
          target_type = "pcx"
        }
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-database-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-database-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-database-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-database-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow EB to access private-data-az-a and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow eb to access private-data-az-a and private-data-az-b subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnet in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnet in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnet in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      # NLB, ALB, LB for EB allow traffic between AWS resources, no internet
      name = "private-alb-rt"
      routes = [
        { # Allow ALB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ALB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ALB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ALB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      # MongoDB? Migrate?
      name = "private-service-rt"
      routes = [
        { # Allow service to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow service to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow service to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow service to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name   = "private-tgw-subnet-az-2a-rt"
      routes = []
    },
    {
      name   = "private-tgw-subnet-az-2b-rt"
      routes = []
    },
    {
      name   = "private-tgw-subnet-az-2c-rt"
      routes = []
    },
    {
      name   = "private-tgw-subnet-az-2d-rt"
      routes = []
    },
    {
      name = "private-dms-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-dms-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-dms-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-dms-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    }
  ]

  subnets = [
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.0.0/22"
      name        = "private-ecs-az-2a-subnet-01"
      route_table = "private-ecs-subnet-az-2a-rt"
      nacl_rule   = "private-ecs"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.4.0/22"
      name        = "private-ecs-az-2b-subnet-01"
      route_table = "private-ecs-subnet-az-2b-rt"
      nacl_rule   = "private-ecs"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.8.0/22"
      name        = "private-ecs-az-2c-subnet-01"
      route_table = "private-ecs-subnet-az-2c-rt"
      nacl_rule   = "private-ecs"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.12.0/22"
      name        = "private-ecs-az-2d-subnet-01"
      route_table = "private-ecs-subnet-az-2d-rt"
      nacl_rule   = "private-ecs"
    },
    # 4 CIDR blocks reserved (10.150.16.0/22, 10.150.20.0/22, 10.150.24.0/22, 10.150.28.0/22)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.32.0/24"
      name        = "private-database-az-2a-subnet-01"
      route_table = "private-database-subnet-az-2a-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.33.0/24"
      name        = "private-database-az-2b-subnet-01"
      route_table = "private-database-subnet-az-2b-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.34.0/24"
      name        = "private-database-az-2c-subnet-01"
      route_table = "private-database-subnet-az-2c-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.35.0/24"
      name        = "private-database-az-2d-subnet-01"
      route_table = "private-database-subnet-az-2d-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.36.0/25"
      name        = "private-dms-az-2a-subnet-01"
      route_table = "private-dms-subnet-az-2a-rt"
      nacl_rule   = "private-dms"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.36.128/25"
      name        = "private-dms-az-2b-subnet-01"
      route_table = "private-dms-subnet-az-2b-rt"
      nacl_rule   = "private-dms"
    },
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.37.0/25"
      name        = "private-dms-az-2c-subnet-01"
      route_table = "private-dms-subnet-az-2c-rt"
      nacl_rule   = "private-dms"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.37.128/25"
      name        = "private-dms-az-2d-subnet-01"
      route_table = "private-dms-subnet-az-2d-rt"
      nacl_rule   = "private-dms"
    },
    # 4 CIDR blocks reserved (10.150.38.0/25, 10.150.38.128/25, 10.150.39.0/25, 10.150.39.128/25)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.40.0/24"
      name        = "private-ec2-az-2a-subnet-01"
      route_table = "private-ec2-subnet-az-2a-rt"
      nacl_rule   = "private-ec2"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.41.0/24"
      name        = "private-ec2-az-2b-subnet-01"
      route_table = "private-ec2-subnet-az-2b-rt"
      nacl_rule   = "private-ec2"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.42.0/24"
      name        = "private-ec2-az-2c-subnet-01"
      route_table = "private-ec2-subnet-az-2c-rt"
      nacl_rule   = "private-ec2"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.43.0/24"
      name        = "private-ec2-az-2d-subnet-01"
      route_table = "private-ec2-subnet-az-2d-rt"
      nacl_rule   = "private-ec2"
    },
    # 4 CIDR blocks reserved (10.150.44.0/24, 10.150.45.0/24, 10.150.46.0/24, 10.150.47.0/24)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.48.0/20"
      name        = "private-lambda-az-2a-subnet-01"
      route_table = "private-lambda-subnet-az-2a-rt"
      nacl_rule   = "private-lambda"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.64.0/20"
      name        = "private-lambda-az-2b-subnet-01"
      route_table = "private-lambda-subnet-az-2b-rt"
      nacl_rule   = "private-lambda"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.80.0/20"
      name        = "private-lambda-az-2c-subnet-01"
      route_table = "private-lambda-subnet-az-2c-rt"
      nacl_rule   = "private-lambda"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.96.0/20"
      name        = "private-lambda-az-2d-subnet-01"
      route_table = "private-lambda-subnet-az-2d-rt"
      nacl_rule   = "private-lambda"
    },
    # 4 CIDR blocks reserved (10.150.112.0/21, 10.150.120.0/21, 10.150.128.0/21, 10.150.136.0/21)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.144.0/25"
      name        = "private-beanstalk-az-2a-subnet-01"
      route_table = "private-beanstalk-subnet-az-2a-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.144.128/25"
      name        = "private-beanstalk-az-2b-subnet-01"
      route_table = "private-beanstalk-subnet-az-2b-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.145.0/25"
      name        = "private-beanstalk-az-2c-subnet-01"
      route_table = "private-beanstalk-subnet-az-2c-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.145.128/25"
      name        = "private-beanstalk-az-2d-subnet-01"
      route_table = "private-beanstalk-subnet-az-2d-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    # 4 CIDR blocks reserved (10.150.146.0/23, 10.150.148.0/23, 10.150.150.0/23, 10.150.152.0/23)
    # This subnets only has local access in his route table, no NG or IG present so no incoming or outgoing traffic for internet.
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.154.0/26"
      name        = "private-service-az-2a-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.154.64/26"
      name        = "private-service-az-2b-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.154.128/26"
      name        = "private-service-az-2c-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.154.192/26"
      name        = "private-service-az-2d-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    # 4 CIDR blocks reserved from 10.150.155.0 to 10.150.155.254
    # Used for internal ALBs.
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.155.0/26"
      name        = "private-alb-az-2a-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.155.64/26"
      name        = "private-alb-az-2b-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.155.128/26"
      name        = "private-alb-az-2c-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.155.192/26"
      name        = "private-alb-az-2d-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    # 4 CIDR blocks reserved 10.150.156.0/24 - 10.150.157.0/24 - 10.150.158.0/24 (AWS Network Firewall etc.)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.159.0/28"
      name        = "public-natgateway-az-2a-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.159.16/28"
      name        = "public-natgateway-az-2b-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.159.32/28"
      name        = "public-natgateway-az-2c-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.159.48/28"
      name        = "public-natgateway-az-2d-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    # 4 CIDR blocks reserved 10.150.159.64/28 - 10.150.159.80/28 - 10.150.159.96/28 - 10.150.159.112/28 - 10.150.159.128/25
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.160.0/24"
      name        = "public-alb-az-2a-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.161.0/24"
      name        = "public-alb-az-2b-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.162.0/24"
      name        = "public-alb-az-2c-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.163.0/24"
      name        = "public-alb-az-2d-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    # 4 CIDR blocks reserved (10.x.164.0/24, 10.x.165.0/24, 10.x.166.0/24, 10.x.167.0/24)
    # data-ec2 10.x.168.0/26, 10.x.168.64/26, 10.x.168.128/26, 10.x.168.192/26 - Internal EC2's that don't need internet access and talk to the DATABASE!
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.168.0/26"
      name        = "data-ec2-az-2a-subnet-01"
      route_table = "data-ec2-subnet-az-2a-rt"
      nacl_rule   = "data-ec2"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.168.64/26"
      name        = "data-ec2-az-2b-subnet-01"
      route_table = "data-ec2-subnet-az-2b-rt"
      nacl_rule   = "data-ec2"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.168.128/26"
      name        = "data-ec2-az-2c-subnet-01"
      route_table = "data-ec2-subnet-az-2c-rt"
      nacl_rule   = "data-ec2"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.168.192/26"
      name        = "data-ec2-az-2d-subnet-01"
      route_table = "data-ec2-subnet-az-2d-rt"
      nacl_rule   = "data-ec2"
    },
    # 4 CIDR blocks reserved (10.x.169.0 - 10.x.169.254)
    # tgw (10.x.170.0/28 - 10.x.170.64/28)
    # https://docs.aws.amazon.com/vpc/latest/tgw/tgw-best-design-practices.html?ssp=1&darkschemeovr=1
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.170.0/28"
      name        = "private-tgw-az-2a-subnet-01"
      route_table = "private-tgw-subnet-az-2a-rt"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.170.16/28"
      name        = "private-tgw-az-2b-subnet-01"
      route_table = "private-tgw-subnet-az-2b-rt"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.170.32/28"
      name        = "private-tgw-az-2c-subnet-01"
      route_table = "private-tgw-subnet-az-2c-rt"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.170.48/28"
      name        = "private-tgw-az-2d-subnet-01"
      route_table = "private-tgw-subnet-az-2d-rt"
    },
    # 4 CIDR blocks reserved (10.x.170.64 - 10.x.170.127)
    # data* 4 CIDR blocks reserved (10.x.172.0 - 10.x.179.255)
    # 4 CIDR blocks reserved (10.x.180.0 - 10.x.180.255)
  ]

  network_acls = [
    {
      name = "private-ecs"
      egress_rules = [
        { # Allow to call HTTPS to ECS for Internet services like Google, Raygun, etc. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow to use HTTP for AWS Network Operations. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 20
          from_port  = 80
          to_port    = 80
        },
        { # Allow ECS to call Redis databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 30
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow ECS to call SEQ.
          action     = "allow"
          cidr_block = "10.152.40.0/23"
          protocol   = "6"
          rule_no    = 40
          from_port  = 5341
          to_port    = 5341
        },
        { # Allow to call Secure SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 50
          from_port  = 587
          to_port    = 587
        },
        { # Allow to call SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 60
          from_port  = 25
          to_port    = 25
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics Subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 80
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for platform-prod subnets in az-a/b
          action     = "allow"
          cidr_block = "172.31.14.0/23" # 14.0, 15.0
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 130
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 150
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call MS SQL server. (genetics-sync UDS)
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 160
          from_port  = 1433
          to_port    = 1433
        },
        { # Allow ECS to call RDS MySQL databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 170
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow ECS to call RDS Postgres databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 180
          from_port  = 5432
          to_port    = 5432
        },
        { # Allow to call ephemeral ports to the VPC. (ALB/Lambda/ECS).
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow internal traffic to HTTP port from public ALBs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow internal traffic to HTTP port from public ALBs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 20
          from_port  = 5000
          to_port    = 5000
        },
        { # Allow to call ephemeral ports to the VPC. (ALB/Lambda/ECS).
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 32768
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-dms"
      egress_rules = [
        { # Allow https ports for S3 buckets.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Access for database in pulse-prod subnets.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 20
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics Subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 80
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for platform-prod subnets in az-a/b
          action     = "allow"
          cidr_block = "172.31.14.0/23"
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 130
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 150
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Ephemeral Ports to Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 160
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { #  Access from database in pulse-prod subnets.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Ephemeral Ports from Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 20
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Internet for AWS Services.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-database"
      egress_rules = [
        { # Allow ephemeral ports for ECS subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        },
        { # Allow ephemeral ports for EB subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 32768
          to_port    = 65535
        },
        { # Allow ephemeral ports for EC2 subnets. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2a (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.48.0/20"
          protocol   = "6"
          rule_no    = 1030
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2b. (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.64.0/20"
          protocol   = "6"
          rule_no    = 1040
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2c. (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.80.0/20"
          protocol   = "6"
          rule_no    = 1050
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2d. (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.96.0/20"
          protocol   = "6"
          rule_no    = 1060
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for dms.
          action     = "allow"
          cidr_block = "10.150.36.0/24"
          protocol   = "6"
          rule_no    = 1070
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow ECS networks to access redis.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 10
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow EB networks to access redis.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 20
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow EC2 to call Redis databases. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 30
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow VPN EC2 subnet to call MongoDB databases. (Rule: VPN can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 40
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet 2a to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.48.0/20"
          protocol   = "6"
          rule_no    = 50
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet 2b to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.64.0/20"
          protocol   = "6"
          rule_no    = 60
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet 2c to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.80.0/20"
          protocol   = "6"
          rule_no    = 70
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.96.0/20"
          protocol   = "6"
          rule_no    = 80
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow ECS networks to access MySQL.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow VPN EC2 subnet to call MySQL databases. (Rule: VPN can use MySQL)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow dms subnet to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.36.0/25"
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2a to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.48.0/20"
          protocol   = "6"
          rule_no    = 120
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2b to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.64.0/20"
          protocol   = "6"
          rule_no    = 130
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2c to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.80.0/20"
          protocol   = "6"
          rule_no    = 140
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2d to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.96.0/20"
          protocol   = "6"
          rule_no    = 150
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow ECS networks to access SQL server.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 160
          from_port  = 1433
          to_port    = 1433
        },
        { # Allow VPN EC2 subnet to call SQL databases. (Rule: VPN can use SQL)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 170
          from_port  = 1433
          to_port    = 1433
        }
      ]
    },
    {
      name = "private-ec2"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations. (We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow HTTP from EC2 Subnets for AWS Network Operations and VPN. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 20
          from_port  = 80
          to_port    = 80
        },
        { # Allow NTP ports to Internet for AWS Network Operations. (We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 30
          from_port  = 123
          to_port    = 123
        },
        { # Allow VPN EC2 to call Redis databases. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 40
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow VPN EC2 to call Mongo databases. (Rule: VPN can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 50
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow VPN EC2 to call RDS MySQL databases. (Rule: VPN can use RDS)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 60
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow VPN EC2 to call RDS Postgres databases. (Rule: VPN can use RDS)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 70
          from_port  = 5432
          to_port    = 5432
        },
        { # Allow ephemeral from EC2 Subnets for VPN.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        },
        { # Allow Ephemeral Ports to Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024
          to_port    = 65535
        },
        { #  Allow VPN EC2 to call RDS SQL databases. (Rule: VPN can use RDS)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 1433
          to_port    = 1433
        }
      ]
      ingress_rules = [
        { # Allow HTTP from EC2 Subnets for SEQ instance.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow RDP from EC2 Subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/22"
          protocol   = "6"
          rule_no    = 11
          from_port  = 3389
          to_port    = 3389
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from database subnets. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow Ephemeral Ports from Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 1024
          to_port    = 65535
        }
      ]
    },
    {
      name = "elastic-beanstalk"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow NTP ports to Internet for AWS Network Operations. (EB deployment requires)
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 20
          from_port  = 123
          to_port    = 123
        },
        {
          # Allow EB to call Redis databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 30
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow to call database ports in 2215 for platform-prod-aurora subnets in az-a/b.
          action     = "allow"
          cidr_block = "172.31.14.0/23" # 14.0, 15.0
          protocol   = "6"
          rule_no    = 40
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow EB to call SEQ.
          action     = "allow"
          cidr_block = "10.152.40.0/23"
          protocol   = "6"
          rule_no    = 50
          from_port  = 5341
          to_port    = 5341
        },
        { # Allow to access ephemeral ports to private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to public-albs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 1001
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow incoming HTTP ports from private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP ports from public-albs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 11
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP ports from private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 20
          from_port  = 5000
          to_port    = 5000
        },
        { # Allow incoming HTTPS ports from private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 30
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPS ports from public-albs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 31
          from_port  = 443
          to_port    = 443
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations. (Ports based on Linux atm).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-service"
      egress_rules = [
        { # Allow ephemeral ports to EC2.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to ECS.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 20
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to Lambda.
          action     = "allow"
          cidr_block = "10.150.0.0/17"
          protocol   = "6"
          rule_no    = 30
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 60
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 1024
          to_port    = 65535
        },
      ]
      ingress_rules = [
        { # Allow ephemeral ports from EC2.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from ECS.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 20
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Lambda.
          action     = "allow"
          cidr_block = "10.150.0.0/17"
          protocol   = "6"
          rule_no    = 30
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 60
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 1024
          to_port    = 65535
        },
      ]
    },
    {
      name = "private-alb"
      egress_rules = [
        { # Allow HTTP traffic to elastic-beanstalk subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow HTTP traffic to elastic-beanstalk subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 20
          from_port  = 5000
          to_port    = 5000
        },
        { # Allow HTTPs traffic to elastic-beanstalk subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 30
          from_port  = 443
          to_port    = 443
        },
        { # Allow internal HTTPs traffic to public ALBs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 40
          from_port  = 443
          to_port    = 443
        },
        { # Allow internal HTTPs traffic to ECS subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 50
          from_port  = 443
          to_port    = 443
        },
        { # Allow to access ephemeral ports to the VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 1001
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 1002
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 1003
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 1004
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow incoming HTTP traffic from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTPs traffic from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 20
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming ephemeral ports from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 11
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 12
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 13
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 14
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 21
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 22
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 23
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 24
          from_port  = 443
          to_port    = 443
        }
      ]
    },
    {
      name = "allow-everything"
      egress_rules = [
        { # NTP for EB deployments.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 1010
          from_port  = 123
          to_port    = 123
        },
        {
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 0
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # NTP for EB deployments.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 1010
          from_port  = 123
          to_port    = 123
        },
        {
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 0
          to_port    = 65535
        }
      ]
    },
    {
      name          = "default-deny"
      egress_rules  = []
      ingress_rules = []
    },
    {
      name = "data-ec2"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations. (We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow HTTP from EC2 Subnets for AWS Network Operations and VPN. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 20
          from_port  = 80
          to_port    = 80
        },
        { # Allow to call database ports in 2215 for platform-prod-aurora subnets in az-a/b.
          action     = "allow"
          cidr_block = "172.31.14.0/23" # 14.0, 15.0
          protocol   = "6"
          rule_no    = 30
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 60
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 130
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 150
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow ephemeral to EC2 Subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow ephemeral ports from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations. (Ports based on Linux atm).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024 # windows 1024-65535, linux 32768-65535
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-lambda"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow HTTP ports to private albs (JR).
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 11
          from_port  = 80
          to_port    = 80
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 20
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 30
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda to call Redis databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 60
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow Lambda to call Secure SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 70
          from_port  = 587
          to_port    = 587
        },
        { # Allow Lambda to call SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 80
          from_port  = 25
          to_port    = 25
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics Subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for platform-prod subnets in az-a/b
          action     = "allow"
          cidr_block = "172.31.14.0/23"
          protocol   = "6"
          rule_no    = 130
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow lambda to call Mongo databases. (Rule: VPN can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call ephemeral ports to the VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow ephemeral ports from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow incoming ephemeral ports from Internet for secrets manager etc..
          # TODO: Replace secrets manager with VPC endpoint!!
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024 # windows 1024-65535, linux 32768-65535
          to_port    = 65535
        },
      ]
    }
  ],
  flow_logs_kms_key_alias = "flow-logs"
}




























Thanks Pete — could you clarify exactly which EventBridge rule we should be decommissioning for genetics-sync? I checked the repo and found the databases-storage-alert-rule tied to RDS genetics DB events, but Carlos mentioned the task title implies an ECS/Fargate task rule. Just want to make sure we’re removing the right resource.











https://developer.hashicorp.com/terraform/language/functions/file
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/sns_topic_policy
https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/iam_policy

Right now all SNS topic policies are written inline inside management.tfvars, which makes the files very large, hard to review, and inconsistent in formatting.

The plan is to move each policy into its own JSON file and then just reference those files in management.tfvars. In main.tf, the policy will be loaded using the file() function instead of embedding the JSON. This will make the codebase cleaner, easier to review, and consistent across environments.

So far, I’ve updated the variable definition to handle file paths, created the first JSON file (vas-platform-integrations), and updated main.tf + management.tfvars accordingly. Next, we will migrate the remaining topics into JSON files and validate with plan/apply.

I’ve been working on DEVOPS-3503 and made the code changes to remove the databases-storage-alert-rule from sandbox. To validate, I ran terraform apply locally (with auto-approval disabled).

The plan correctly showed the databases-storage-alert-rule and its target scheduled for destroy, but it also flagged two additional rules (dms-task-failure-rule and elasticbeanstalk-notification-rule) for removal, plus one SNS target addition. I cancelled the apply at the prompt so no changes were made.

Can you confirm if those extra rules are expected to be removed, or if we need to re-add them back to the tfvars?










Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ terraform -chdir="src/terraform/pulse/eventbridge"  init --backend-config="${PWD}/src/terraform/pulse/env-sandbox/sandbox.conf"

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.
Initializing modules...
- eventbridge_oregon in ..\..\modules\eventbridge
- eventbridge_virginia in ..\..\modules\eventbridge

Initializing provider plugins...
- Finding hashicorp/aws versions matching "~> 4.0"...
- Installing hashicorp/aws v4.67.0...
- Installed hashicorp/aws v4.67.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ terraform -chdir="src/terraform/pulse/eventbridge" apply -input=false -var-file=sandbox.tfvars -var-file="${PWD}/src/terraform/pulse/env-sandbox/global.tfvars" -compact-warnings
Acquiring state lock. This may take a few moments...
module.eventbridge_virginia.data.aws_cloudwatch_event_bus.default: Reading...
data.aws_caller_identity.current: Reading...
module.eventbridge_oregon.data.aws_cloudwatch_event_bus.default: Reading...
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["cloudtrail-rule"]: Refreshing state... [id=cloudtrail-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["ecr-rule"]: Refreshing state... [id=ecr-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["autoscaling-rule"]: Refreshing state... [id=autoscaling-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["elasticache-rule"]: Refreshing state... [id=elasticache-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["route53resolver-rule"]: Refreshing state... [id=route53resolver-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["databases-storage-alert-rule"]: Refreshing state... [id=databases-storage-alert-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["dynamodb-rule"]: Refreshing state... [id=dynamodb-rule]
data.aws_caller_identity.current: Read complete after 1s [id=792827266856]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["backup-rule"]: Refreshing state... [id=backup-rule]
module.eventbridge_virginia.data.aws_cloudwatch_event_bus.default: Read complete after 1s [id=default]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["security-hub-notification-rule-critical"]: Refreshing state... [id=security-hub-notification-rule-critical]
module.eventbridge_oregon.data.aws_cloudwatch_event_bus.default: Read complete after 1s [id=default]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["ec2-rule"]: Refreshing state... [id=ec2-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["dms-task-failure-rule"]: Refreshing state... [id=dms-task-failure-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["cloudwatch-logs-rule"]: Refreshing state... [id=cloudwatch-logs-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["cloudfront-rule"]: Refreshing state... [id=cloudfront-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["elasticloadbalancing-rule"]: Refreshing state... [id=elasticloadbalancing-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["codebuild-rule"]: Refreshing state... [id=codebuild-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["kms-rule"]: Refreshing state... [id=kms-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["acm-certificate-deletion-rule"]: Refreshing state... [id=acm-certificate-deletion-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["secretsmanager-rule"]: Refreshing state... [id=secretsmanager-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["apigateway-rule"]: Refreshing state... [id=apigateway-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["elasticbeanstalk-notification-rule"]: Refreshing state... [id=elasticbeanstalk-notification-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["ses-rule"]: Refreshing state... [id=ses-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["security-hub-notification-rule"]: Refreshing state... [id=security-hub-notification-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["cloudformation-rule"]: Refreshing state... [id=cloudformation-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["rds-rule"]: Refreshing state... [id=rds-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["ecs-rule"]: Refreshing state... [id=ecs-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["events-rule"]: Refreshing state... [id=events-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["config-rule"]: Refreshing state... [id=config-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["cost-anomaly-detection-rule"]: Refreshing state... [id=cost-anomaly-detection-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["elasticbeanstalk-rule"]: Refreshing state... [id=elasticbeanstalk-rule]
module.eventbridge_oregon.aws_cloudwatch_event_rule.this["cloudwatch-monitoring-rule"]: Refreshing state... [id=cloudwatch-monitoring-rule]
module.eventbridge_virginia.aws_cloudwatch_event_rule.this["iam-rule"]: Refreshing state... [id=iam-rule]
module.eventbridge_virginia.aws_cloudwatch_event_rule.this["s3-rule"]: Refreshing state... [id=s3-rule]
module.eventbridge_virginia.aws_cloudwatch_event_rule.this["organizations-rule"]: Refreshing state... [id=organizations-rule]
module.eventbridge_virginia.aws_cloudwatch_event_rule.this["route53-rule"]: Refreshing state... [id=route53-rule]
module.eventbridge_virginia.aws_cloudwatch_event_rule.this["securityhub-rule"]: Refreshing state... [id=securityhub-rule]
module.eventbridge_virginia.aws_cloudwatch_event_rule.this["acm-certificate-deletion-rule"]: Refreshing state... [id=acm-certificate-deletion-rule]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["elasticloadbalancing-rule-target-0"]: Refreshing state... [id=elasticloadbalancing-rule-terraform-20250305164819571500000009]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["backup-rule-target-0"]: Refreshing state... [id=backup-rule-terraform-20250305164819564900000004]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["elasticache-rule-target-0"]: Refreshing state... [id=elasticache-rule-terraform-20250305164820684200000015]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["route53resolver-rule-target-0"]: Refreshing state... [id=route53resolver-rule-terraform-20250305164819564700000003]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["ses-rule-target-0"]: Refreshing state... [id=ses-rule-terraform-20250305164820129200000011]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["elasticbeanstalk-rule-target-0"]: Refreshing state... [id=elasticbeanstalk-rule-terraform-2025030516482011190000000b]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["ecs-rule-target-0"]: Refreshing state... [id=ecs-rule-terraform-2024031811254418200000000a]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["rds-rule-target-0"]: Refreshing state... [id=rds-rule-terraform-20250305164819563400000001]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["events-rule-target-0"]: Refreshing state... [id=events-rule-terraform-20250305164820131100000012]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["codebuild-rule-target-0"]: Refreshing state... [id=codebuild-rule-terraform-2025030516482011440000000c]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["cloudfront-rule-target-0"]: Refreshing state... [id=cloudfront-rule-terraform-20250305164820123600000010]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["cloudtrail-rule-target-0"]: Refreshing state... [id=cloudtrail-rule-terraform-20250305164819567500000006]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["secretsmanager-rule-target-0"]: Refreshing state... [id=secretsmanager-rule-terraform-2025030516482012230000000e]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["cost-anomaly-detection-rule-target-0"]: Refreshing state... [id=cost-anomaly-detection-rule-terraform-20250305150317206800000001]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["autoscaling-rule-target-0"]: Refreshing state... [id=autoscaling-rule-terraform-20250305164819570500000008]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["cloudformation-rule-target-0"]: Refreshing state... [id=cloudformation-rule-terraform-20250305164820682100000014]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["acm-certificate-deletion-rule-target-0"]: Refreshing state... [id=acm-certificate-deletion-rule-terraform-20250305164819567500000007]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["databases-storage-alert-rule-target-0"]: Refreshing state... [id=databases-storage-alert-rule-terraform-20250513213219216100000001]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["security-hub-notification-rule-target-0"]: Refreshing state... [id=security-hub-notification-rule-terraform-20250610144432118500000001]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["ecr-rule-target-0"]: Refreshing state... [id=ecr-rule-terraform-20250305164820684300000016]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["config-rule-target-0"]: Refreshing state... [id=config-rule-terraform-2025030516482011560000000d]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["kms-rule-target-0"]: Refreshing state... [id=kms-rule-terraform-2025030516482012230000000f]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["apigateway-rule-target-0"]: Refreshing state... [id=apigateway-rule-terraform-20250305164819565100000005]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["cloudwatch-logs-rule-target-0"]: Refreshing state... [id=cloudwatch-logs-rule-terraform-20250305164820135300000013]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["ec2-rule-target-0"]: Refreshing state... [id=ec2-rule-terraform-20250305164820684400000017]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["dynamodb-rule-target-0"]: Refreshing state... [id=dynamodb-rule-terraform-20250305164819563400000002]
module.eventbridge_oregon.aws_cloudwatch_event_target.this["cloudwatch-monitoring-rule-target-0"]: Refreshing state... [id=cloudwatch-monitoring-rule-terraform-2025030516481957460000000a]
module.eventbridge_virginia.aws_cloudwatch_event_target.this["route53-rule-target-0"]: Refreshing state... [id=route53-rule-terraform-20250305164818800500000004]
module.eventbridge_virginia.aws_cloudwatch_event_target.this["acm-certificate-deletion-rule-target-0"]: Refreshing state... [id=acm-certificate-deletion-rule-terraform-20250305164819007600000005]
module.eventbridge_virginia.aws_cloudwatch_event_target.this["iam-rule-target-0"]: Refreshing state... [id=iam-rule-terraform-20250305164818724100000002]
module.eventbridge_virginia.aws_cloudwatch_event_target.this["securityhub-rule-target-0"]: Refreshing state... [id=securityhub-rule-terraform-20250305164819015600000006]
module.eventbridge_virginia.aws_cloudwatch_event_target.this["s3-rule-target-0"]: Refreshing state... [id=s3-rule-terraform-20250305164818556300000001]
module.eventbridge_virginia.aws_cloudwatch_event_target.this["organizations-rule-target-0"]: Refreshing state... [id=organizations-rule-terraform-20250305164818780000000003]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  - destroy

Terraform will perform the following actions:

  # module.eventbridge_oregon.aws_cloudwatch_event_rule.this["databases-storage-alert-rule"] will be destroyed
  # (because key ["databases-storage-alert-rule"] is not in for_each map)
  - resource "aws_cloudwatch_event_rule" "this" {
      - arn            = "arn:aws:events:us-west-2:792827266856:rule/databases-storage-alert-rule" -> null
      - description    = "General event" -> null
      - event_bus_name = "default" -> null
      - event_pattern  = jsonencode(
            {
              - detail      = {
                  - EventID   = [
                      - "RDS-EVENT-0089",
                      - "RDS-EVENT-0007",
                      - "RDS-EVENT-0227",
                      - "RDS-EVENT-0222",
                    ]
                  - SourceArn = [
                      - "arn:aws:rds:us-west-2:792827266856:db:crud-users-db",
                      - "arn:aws:rds:us-west-2:792827266856:db:agsource-alta-gps",
                      - "arn:aws:rds:us-west-2:792827266856:cluster:datascience-platform-aurora-cluster",
                      - "arn:aws:rds:us-west-2:792827266856:cluster:platform-prod-aurora",
                      - "arn:aws:rds:us-west-2:792827266856:db:vas-db-genetics",
                    ]
                }
              - detail-type = [
                  - "RDS DB Instance Event",
                ]
              - source      = [
                  - "aws.rds",
                ]
            }
        ) -> null
      - id             = "databases-storage-alert-rule" -> null
      - is_enabled     = true -> null
      - name           = "databases-storage-alert-rule" -> null
      - tags           = {
          - "Name" = "databases-storage-alert-rule"
        } -> null
      - tags_all       = {
          - "Name"         = "databases-storage-alert-rule"
          - "application"  = "terraform"
          - "costcenter"   = "vas"
          - "env"          = "sandbox"
          - "managedby"    = "terraform"
          - "map-migrated" = "migED85X1S2OJ"
          - "owner"        = "VasDevOpsteam@vas.com"
          - "product"      = "pulse"
          - "project"      = "devops"
        } -> null
    }

  # module.eventbridge_oregon.aws_cloudwatch_event_rule.this["dms-task-failure-rule"] will be destroyed
  # (because key ["dms-task-failure-rule"] is not in for_each map)
  - resource "aws_cloudwatch_event_rule" "this" {
      - arn            = "arn:aws:events:us-west-2:792827266856:rule/dms-task-failure-rule" -> null
      - description    = "General event" -> null
      - event_bus_name = "default" -> null
      - event_pattern  = jsonencode(
            {
              - detail      = {
                  - ReplicationTaskStatus = [
                      - "failed",
                    ]
                }
              - detail-type = [
                  - "DMS Replication Task State Change",
                ]
              - source      = [
                  - "aws.dms",
                ]
            }
        ) -> null
      - id             = "dms-task-failure-rule" -> null
      - is_enabled     = true -> null
      - name           = "dms-task-failure-rule" -> null
      - tags           = {} -> null
      - tags_all       = {} -> null
    }

  # module.eventbridge_oregon.aws_cloudwatch_event_rule.this["elasticbeanstalk-notification-rule"] will be destroyed
  # (because key ["elasticbeanstalk-notification-rule"] is not in for_each map)
  - resource "aws_cloudwatch_event_rule" "this" {
      - arn            = "arn:aws:events:us-west-2:792827266856:rule/elasticbeanstalk-notification-rule" -> null
      - description    = "General event" -> null
      - event_bus_name = "default" -> null
      - event_pattern  = jsonencode(
            {
              - detail      = {
                  - Severity = [
                      - "Severe",
                      - "Degraded",
                    ]
                }
              - detail-type = [
                  - "Health status change",
                ]
              - source      = [
                  - "aws.elasticbeanstalk",
                ]
            }
        ) -> null
      - id             = "elasticbeanstalk-notification-rule" -> null
      - is_enabled     = true -> null
      - name           = "elasticbeanstalk-notification-rule" -> null
      - tags           = {
          - "Name" = "elasticbeanstalk-notification-rule"
        } -> null
      - tags_all       = {
          - "Name"         = "elasticbeanstalk-notification-rule"
          - "application"  = "terraform"
          - "costcenter"   = "vas"
          - "env"          = "sandbox"
          - "managedby"    = "terraform"
          - "map-migrated" = "migED85X1S2OJ"
          - "owner"        = "VasDevOpsteam@vas.com"
          - "product"      = "pulse"
          - "project"      = "devops"
        } -> null
    }

  # module.eventbridge_oregon.aws_cloudwatch_event_target.this["databases-storage-alert-rule-target-0"] will be destroyed
  # (because key ["databases-storage-alert-rule-target-0"] is not in for_each map)
  - resource "aws_cloudwatch_event_target" "this" {
      - arn            = "arn:aws:sns:us-west-2:792827266856:vas-devops-events" -> null
      - event_bus_name = "default" -> null
      - id             = "databases-storage-alert-rule-terraform-20250513213219216100000001" -> null
      - rule           = "databases-storage-alert-rule" -> null
      - target_id      = "terraform-20250513213219216100000001" -> null
    }

  # module.eventbridge_oregon.aws_cloudwatch_event_target.this["security-hub-notification-rule-critical-target-0"] will be created
  + resource "aws_cloudwatch_event_target" "this" {
      + arn            = "arn:aws:sns:us-west-2:792827266856:sns-alerts-critical"
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "security-hub-notification-rule-critical"
      + target_id      = (known after apply)
    }

Plan: 1 to add, 0 to change, 4 to destroy.

Warnings:

- Value for undeclared variable

To see the full warning notes, run Terraform without -compact-warnings.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: no

Apply cancelled.
Releasing state lock. This may take a few moments...

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$














Background

DEVOPS-3503 – cleanup of EventBridge rules.
The databases-storage-alert-rule was configured to capture RDS instance events and send them to the vas-devops-events SNS topic. After review, this rule is no longer needed in the sandbox environment, so it has been removed from Terraform code.

Changes

Deleted the full block for databases-storage-alert-rule from sandbox.tfvars under eventbridge/.

Left all other environments untouched (staging, prod, management, security).

No other EventBridge rules or SNS targets were modified.

Confirmed the SNS topic vas-devops-events remains in place since it is still used by multiple other rules.



Background
DEVOPS-3503

As part of DEVOPS-3503, we are decommissioning the EventBridge rule databases-storage-alert-rule.
This rule was listening to RDS genetics DB events (vas-db-genetics) and publishing notifications to the vas-devops-events SNS topic.
The rule is no longer required post-migration and must be removed.

Diagrams and Screenshots
Checklist
 I ran the pre-commit linter - format, tfsec, checkov
 I have validate the security and static analysis output
 I have deployed to AWS and confirmed the changes work
 I have attached a screenshot of the deployed resources (minus sensitive pieces, if applicable)
 I updated the documentation, if necessary - links of updated docs provided



I have create the pr but github action ci is geetig fail 

Run terraform -chdir=src/terraform/pulse/eventbridge plan -input=false -no-color -var-file=staging.tfvars -var-file="${PWD}/src/terraform/pulse/env-staging/global.tfvars" -out=eventbridge-5749fdfdc0db052d5e3987e834091480d7d091f2-staging.tfplan
  terraform -chdir=src/terraform/pulse/eventbridge plan -input=false -no-color -var-file=staging.tfvars -var-file="${PWD}/src/terraform/pulse/env-staging/global.tfvars" -out=eventbridge-5749fdfdc0db052d5e3987e834091480d7d091f2-staging.tfplan
  shell: /usr/bin/bash -e {0}
  env:
    AWS_DEFAULT_REGION: us-west-2
    AWS_REGION: us-west-2
    AWS_ACCESS_KEY_ID: ***
    AWS_SECRET_ACCESS_KEY: ***
    AWS_SESSION_TOKEN: ***
    TERRAFORM_CLI_PATH: /home/runner/work/_temp/f10a92b0-cc7e-4c08-9fad-8d0c75dea262
module.eventbridge_oregon.data.aws_cloudwatch_event_bus.default: Reading...
data.aws_caller_identity.current: Reading...
module.eventbridge_virginia.data.aws_cloudwatch_event_bus.default: Reading...
module.eventbridge_oregon.data.aws_cloudwatch_event_bus.default: Read complete after 0s [id=default]
module.eventbridge_virginia.data.aws_cloudwatch_event_bus.default: Read complete after 0s [id=default]
data.aws_caller_identity.current: Read complete after 0s [id=512438066734]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

Terraform planned the following actions, but then encountered a problem:

  # module.eventbridge_virginia.aws_cloudwatch_event_rule.this["acm-certificate-deletion-rule"] will be created
  + resource "aws_cloudwatch_event_rule" "this" {
      + arn            = (known after apply)
      + description    = "General event"
      + event_bus_name = "default"
      + event_pattern  = jsonencode(
            {
              + detail      = {
                  + eventName   = [
                      + "DeleteCertificate",
                    ]
                  + eventSource = [
                      + "acm.amazonaws.com",
                    ]
                }
              + detail-type = [
                  + "AWS API Call via CloudTrail",
                ]
              + source      = [
                  + "aws.acm",
                ]
            }
        )
      + id             = (known after apply)
      + is_enabled     = true
      + name           = "acm-certificate-deletion-rule"
      + name_prefix    = (known after apply)
      + tags           = {
          + "Name" = "acm-certificate-deletion-rule"
        }
      + tags_all       = {
          + "Name"         = "acm-certificate-deletion-rule"
          + "application"  = "terraform"
          + "costcenter"   = "vas"
          + "env"          = "staging"
          + "managedby"    = "terraform"
          + "map-migrated" = "migED85X1S2OJ"
          + "owner"        = "VasDevOpsteam@vas.com"
          + "product"      = "pulse"
          + "project"      = "devops"
        }
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_rule.this["iam-rule"] will be created
  + resource "aws_cloudwatch_event_rule" "this" {
      + arn            = (known after apply)
      + description    = "General event"
      + event_bus_name = "default"
      + event_pattern  = jsonencode(
            {
              + detail      = {
                  + eventName   = [
                      + "CreateAccessKey",
                      + "CreateUser",
                      + "DeleteAccessKey",
                      + "DeleteGroup",
                      + "DeleteUser",
                      + "RemoveUserFromGroup",
                    ]
                  + eventSource = [
                      + "iam.amazonaws.com",
                    ]
                }
              + detail-type = [
                  + "AWS API Call via CloudTrail",
                ]
              + source      = [
                  + "aws.iam",
                ]
            }
        )
      + id             = (known after apply)
      + is_enabled     = true
      + name           = "iam-rule"
      + name_prefix    = (known after apply)
      + tags           = {
          + "Name" = "iam-rule"
        }
      + tags_all       = {
          + "Name"         = "iam-rule"
          + "application"  = "terraform"
          + "costcenter"   = "vas"
          + "env"          = "staging"
          + "managedby"    = "terraform"
          + "map-migrated" = "migED85X1S2OJ"
          + "owner"        = "VasDevOpsteam@vas.com"
          + "product"      = "pulse"
          + "project"      = "devops"
        }
    }


  # module.eventbridge_virginia.aws_cloudwatch_event_rule.this["organizations-rule"] will be created
  + resource "aws_cloudwatch_event_rule" "this" {
      + arn            = (known after apply)
      + description    = "General event"
      + event_bus_name = "default"
      + event_pattern  = jsonencode(
            {
              + detail      = {
                  + eventName   = [
                      + "CreateAccount",
                      + "CreateOrganization",
                      + "CreateOrganizationalUnit",
                      + "CreatePolicy",
                      + "DeleteOrganization",
                      + "DeleteOrganizationalUnit",
                      + "DeletePolicy",
                      + "DetachPolicy",
                      + "DisableAWSServiceAccess",
                      + "InviteAccountToOrganization",
                      + "LeaveOrganization",
                      + "MoveAccount",
                      + "RemoveAccountFromOrganization",
                      + "UpdateOrganizationalUnit",
                      + "UpdatePolicy",
                    ]
                  + eventSource = [
                      + "organizations.amazonaws.com",
                    ]
                }
              + detail-type = [
                  + "AWS API Call via CloudTrail",
                ]
              + source      = [
                  + "aws.organizations",
                ]
            }
        )
      + id             = (known after apply)
      + is_enabled     = true
      + name           = "organizations-rule"
      + name_prefix    = (known after apply)
      + tags           = {
          + "Name" = "organizations-rule"
        }
      + tags_all       = {
          + "Name"         = "organizations-rule"
          + "application"  = "terraform"
          + "costcenter"   = "vas"
          + "env"          = "staging"
          + "managedby"    = "terraform"
          + "map-migrated" = "migED85X1S2OJ"
          + "owner"        = "VasDevOpsteam@vas.com"
          + "product"      = "pulse"
          + "project"      = "devops"
        }
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_rule.this["route53-rule"] will be created
  + resource "aws_cloudwatch_event_rule" "this" {
      + arn            = (known after apply)
      + description    = "General event"
      + event_bus_name = "default"
      + event_pattern  = jsonencode(
            {
              + detail      = {
                  + eventName   = [
                      + "ChangeResourceRecordSets",
                      + "CreateHealthCheck",
                      + "CreateHostedZone",
                      + "DeleteHealthCheck",
                      + "DeleteHostedZone",
                    ]
                  + eventSource = [
                      + "route53.amazonaws.com",
                    ]
                }
              + detail-type = [
                  + "AWS API Call via CloudTrail",
                ]
              + source      = [
                  + "aws.route53",
                ]
            }
        )
      + id             = (known after apply)
      + is_enabled     = true
      + name           = "route53-rule"
      + name_prefix    = (known after apply)
      + tags           = {
          + "Name" = "route53-rule"
        }
      + tags_all       = {
          + "Name"         = "route53-rule"
          + "application"  = "terraform"
          + "costcenter"   = "vas"
          + "env"          = "staging"
          + "managedby"    = "terraform"
          + "map-migrated" = "migED85X1S2OJ"
          + "owner"        = "VasDevOpsteam@vas.com"
          + "product"      = "pulse"
          + "project"      = "devops"
        }
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_rule.this["s3-rule"] will be created
  + resource "aws_cloudwatch_event_rule" "this" {
      + arn            = (known after apply)
      + description    = "General event"
      + event_bus_name = "default"
      + event_pattern  = jsonencode(
            {
              + detail      = {
                  + eventName   = [
                      + "DeleteBucket",
                      + "DeleteBucketEncryption",
                      + "DeleteBucketPolicy",
                      + "PutBucketPolicy",
                    ]
                  + eventSource = [
                      + "s3.amazonaws.com",
                    ]
                }
              + detail-type = [
                  + "AWS API Call via CloudTrail",
                ]
              + source      = [
                  + "aws.s3",
                ]
            }
        )
      + id             = (known after apply)
      + is_enabled     = true
      + name           = "s3-rule"
      + name_prefix    = (known after apply)
      + tags           = {
          + "Name" = "s3-rule"
        }
      + tags_all       = {
          + "Name"         = "s3-rule"
          + "application"  = "terraform"
          + "costcenter"   = "vas"
          + "env"          = "staging"
          + "managedby"    = "terraform"
          + "map-migrated" = "migED85X1S2OJ"
          + "owner"        = "VasDevOpsteam@vas.com"
          + "product"      = "pulse"
          + "project"      = "devops"
        }
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_rule.this["securityhub-rule"] will be created
  + resource "aws_cloudwatch_event_rule" "this" {
      + arn            = (known after apply)
      + description    = "General event"
      + event_bus_name = "default"
      + event_pattern  = jsonencode(
            {
              + detail      = {
                  + eventName   = [
                      + "DisableSecurityHub",
                    ]
                  + eventSource = [
                      + "securityhub.amazonaws.com",
                    ]
                }
              + detail-type = [
                  + "AWS API Call via CloudTrail",
                ]
              + source      = [
                  + "aws.securityhub",
                ]
            }
        )
      + id             = (known after apply)
      + is_enabled     = true
      + name           = "securityhub-rule"
      + name_prefix    = (known after apply)
      + tags           = {
          + "Name" = "securityhub-rule"
        }
      + tags_all       = {
          + "Name"         = "securityhub-rule"
          + "application"  = "terraform"
          + "costcenter"   = "vas"
          + "env"          = "staging"
          + "managedby"    = "terraform"
          + "map-migrated" = "migED85X1S2OJ"
          + "owner"        = "VasDevOpsteam@vas.com"
          + "product"      = "pulse"
          + "project"      = "devops"
        }
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_target.this["acm-certificate-deletion-rule-target-0"] will be created
  + resource "aws_cloudwatch_event_target" "this" {
      + arn            = "arn:aws:sns:us-east-1:512438066734:vas-devops-events"
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "acm-certificate-deletion-rule"
      + target_id      = (known after apply)
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_target.this["iam-rule-target-0"] will be created
  + resource "aws_cloudwatch_event_target" "this" {
      + arn            = "arn:aws:sns:us-east-1:512438066734:vas-devops-events"
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "iam-rule"
      + target_id      = (known after apply)
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_target.this["organizations-rule-target-0"] will be created
  + resource "aws_cloudwatch_event_target" "this" {
      + arn            = "arn:aws:sns:us-east-1:512438066734:vas-devops-events"
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "organizations-rule"
      + target_id      = (known after apply)
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_target.this["route53-rule-target-0"] will be created
  + resource "aws_cloudwatch_event_target" "this" {
      + arn            = "arn:aws:sns:us-east-1:512438066734:vas-devops-events"
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "route53-rule"
      + target_id      = (known after apply)
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_target.this["s3-rule-target-0"] will be created
  + resource "aws_cloudwatch_event_target" "this" {
      + arn            = "arn:aws:sns:us-east-1:512438066734:vas-devops-events"
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "s3-rule"
      + target_id      = (known after apply)
    }

  # module.eventbridge_virginia.aws_cloudwatch_event_target.this["securityhub-rule-target-0"] will be created
  + resource "aws_cloudwatch_event_target" "this" {
      + arn            = "arn:aws:sns:us-east-1:512438066734:vas-devops-events"
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "securityhub-rule"
      + target_id      = (known after apply)
    }

Plan: 12 to add, 0 to change, 0 to destroy.

Warning: Value for undeclared variable

The root module does not declare a variable named "backend_info" but a value
was found in file
"/home/runner/work/vas-devops-pulse/vas-devops-pulse/src/terraform/pulse/env-staging/global.tfvars".
If you meant to use this value, add a "variable" block to the configuration.

To silence these warnings, use TF_VAR_... environment variables to provide
certain "global" settings to all configurations in your organization. To
reduce the verbosity of these warnings, use the -compact-warnings option.
Error: Invalid function argument

  on main.tf line 14, in module "eventbridge_oregon":
  13:     event_pattern = try(rule.event_pattern, false) ? rule.event_pattern : templatefile("${path.module}/event_patterns/${try(rule.event_pattern_file, null) != null ? rule.event_pattern_file : "call_via_cloudtrail"}.json",
  14:     try(rule.event_pattern_vars, {}))

Invalid value for "vars" parameter: vars map does not contain key
"securityhub_severity", referenced at
./event_patterns/security-hub-notification.json:7,35-55.
Error: Terraform exited with code 1.
Error: Process completed with exit code 1.



Removed the EventBridge rule `databases-storage-alert-rule` as part of DEVOPS-3503. 
Tested in sandbox – confirmed Terraform destroyed the rule/target and AWS CLI shows it’s gone. 
SNS topic `vas-devops-events` remains intact. 
Ready for review.



Background

As part of DEVOPS-3503, we are decommissioning the EventBridge rule databases-storage-alert-rule.
This rule was listening to RDS genetics DB events (vas-db-genetics) and publishing notifications to the vas-devops-events SNS topic.
The rule is no longer required post-migration and must be removed from all environments.

What was changed

Removed the databases-storage-alert-rule block from:

sandbox.tfvars

staging.tfvars

prod.tfvars

(also checked management/security — no further references found).

Retained the vas-devops-events SNS topic, since other rules still publish to it.

No other EventBridge rules were modified.

Validation

Ran terraform plan in sandbox:

Confirmed only the EventBridge rule and target show as - destroy.

Applied in sandbox:

Verified with aws events list-rules --region us-west-2 → databases-storage-alert-rule no longer present.

Confirmed vas-devops-events SNS topic still exists and is used by other rules.

Staging/Prod promotion to follow after approvals.

Rollback

Re-add the same block into tfvars and apply; Terraform will re-create the rule and target.

🔹 Screenshots & Evidence (attach in PR)

📸 Terraform plan output (showing - destroy).

📸 AWS CLI aws events list-rules after sandbox apply (showing rule removed).

🔹 Checklist

 I ran the pre-commit linter (format, tfsec, checkov)

 I validated the security and static analysis output

 I deployed to sandbox and confirmed the EventBridge rule was removed

 I will promote to staging and prod after PR approval

 I updated documentation if necessary

🔹 Short GitHub Comment (for reviewers)
Removed the EventBridge rule `databases-storage-alert-rule` as part of DEVOPS-3503. 
Tested in sandbox – confirmed Terraform destroyed the rule/target and AWS CLI shows it’s gone. 
SNS topic `vas-devops-events` remains intact. 
Ready for review.











eventbridge = {
  virginia = {
    rules = [
      {
        name = "acm-certificate-deletion-rule"
        event_pattern_vars = {
          source = "acm"
          events = ["DeleteCertificate"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "iam-rule"
        event_pattern_vars = {
          source = "iam"
          events = [
            "CreateAccessKey",
            "CreateUser",
            "DeleteAccessKey",
            "DeleteGroup",
            "DeleteUser",
            "RemoveUserFromGroup"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "organizations-rule"
        event_pattern_vars = {
          source = "organizations"
          events = [
            "CreateAccount",
            "CreateOrganization",
            "CreateOrganizationalUnit",
            "CreatePolicy",
            "DeleteOrganization",
            "DeleteOrganizationalUnit",
            "DeletePolicy",
            "DetachPolicy",
            "DisableAWSServiceAccess",
            "InviteAccountToOrganization",
            "LeaveOrganization",
            "MoveAccount",
            "RemoveAccountFromOrganization",
            "UpdateOrganizationalUnit",
            "UpdatePolicy"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "route53-rule"
        event_pattern_vars = {
          source = "route53"
          events = [
            "ChangeResourceRecordSets",
            "CreateHealthCheck",
            "CreateHostedZone",
            "DeleteHealthCheck",
            "DeleteHostedZone"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "s3-rule"
        event_pattern_vars = {
          source = "s3"
          events = [
            "DeleteBucket",
            "DeleteBucketEncryption",
            "DeleteBucketPolicy",
            "PutBucketPolicy"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "securityhub-rule"
        event_pattern_vars = {
          source = "securityhub"
          events = ["DisableSecurityHub"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      }
    ]
  }

  oregon = {
    rules = [
      {
        name = "acm-certificate-deletion-rule"
        event_pattern_vars = {
          source = "acm"
          events = ["DeleteCertificate"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "apigateway-rule"
        event_pattern_vars = {
          source = "apigateway"
          events = [
            "DeleteApiKey",
            "DeleteAuthorizer",
            "DeleteClientCertificate",
            "DeleteUsagePlan",
            "UpdateUsagePlan"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "autoscaling-rule"
        event_pattern_vars = {
          source = "autoscaling"
          events = ["DeleteScalingPolicy", "DeleteScheduledAction"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "backup-rule"
        event_pattern_vars = {
          source = "backup"
          events = ["DeleteBackupPlan", "DeleteBackupVault"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudformation-rule"
        event_pattern_vars = {
          source = "cloudformation"
          events = ["DeleteStack", "DeleteStackInstances", "DeleteStackSet"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudfront-rule"
        event_pattern_vars = {
          source = "cloudfront"
          events = [
            "CreateCloudFrontOriginAccessIdentity",
            "DeleteDistribution",
            "UpdateCloudFrontOriginAccessIdentity",
            "UpdateDistribution"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudtrail-rule"
        event_pattern_vars = {
          source = "cloudtrail"
          events = ["DeleteTrail", "StopLogging", "UpdateTrail"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "codebuild-rule"
        event_pattern_vars = {
          source = "codebuild"
          events = ["DeleteProject", "DeleteWebhook"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "config-rule"
        event_pattern_vars = {
          source = "config"
          events = [
            "DeleteConfigRule",
            "DeleteConfigurationAggregator",
            "DeleteConfigurationRecorder",
            "DeleteEvaluationResults",
            "DeleteRetentionConfiguration"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "dynamodb-rule"
        event_pattern_vars = {
          source = "dynamodb"
          events = ["DeleteTable"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ec2-rule"
        event_pattern_vars = {
          source = "ec2"
          events = [
            "CreateKeyPair",
            "CreateRoute",
            "CreateRouteTable",
            "DeleteInternetGateway",
            "DeleteKeyPair",
            "DeleteNatGateway",
            "DeleteRoute",
            "DeleteRouteTable",
            "DeleteSecurityGroup",
            "DeleteSubnet",
            "DeleteTransitGateway",
            "DeleteTransitGatewayRoute",
            "DeleteTransitGatewayRouteTable",
            "DeleteVpc",
            "DeleteVpcEndpoints",
            "DeleteVpcPeeringConnection",
            "DetachInternetGateway",
            "DetachVolume",
            "DisassociateRouteTable",
            "ModifySubnetAttribute",
            "ModifyVpcAttribute",
            "ReplaceRoute",
            "StopInstances",
            "TerminateInstances"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ecr-rule"
        event_pattern_vars = {
          source = "ecr"
          events = [
            "DeleteLifecyclePolicy",
            "DeleteRepository",
            "DeleteRepositoryPolicy"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "elasticache-rule"
        event_pattern_vars = {
          source = "elasticache"
          events = ["DeleteCacheCluster"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "elasticbeanstalk-rule"
        event_pattern_vars = {
          source = "elasticbeanstalk"
          events = ["DeleteApplication", "SwapEnvironmentCNAMEs"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "elasticloadbalancing-rule"
        event_pattern_vars = {
          source = "elasticloadbalancing"
          events = [
            "DeleteLoadBalancer",
            "DeleteLoadBalancerListeners",
            "DetachLoadBalancerFromSubnets",
            "DisableAvailabilityZonesForLoadBalancer",
            "ModifyLoadBalancerAttributes"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ses-rule"
        event_pattern_vars = {
          source = "ses"
          events = ["DeleteIdentity", "DeleteIdentity"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "events-rule"
        event_pattern_vars = {
          source = "events"
          events = ["DeleteIdentity", "DeleteIdentity"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "kms-rule"
        event_pattern_vars = {
          source = "kms"
          events = ["DisableKey", "ScheduleKeyDeletion"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudwatch-logs-rule"
        event_pattern_vars = {
          source = "logs"
          events = ["AssociateKmsKey"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudwatch-monitoring-rule"
        event_pattern_vars = {
          source = "monitoring"
          events = ["DeleteAlarms", "DeleteDashboards", "DisableAlarmActions"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "rds-rule"
        event_pattern_vars = {
          source = "rds"
          events = [
            "CreateDBCluster",
            "CreateDBInstance",
            "DeleteDBCluster",
            "DeleteDBClusterParameterGroup",
            "DeleteDBInstance",
            "DeleteDBSubnetGroup",
            "FailoverDBCluster",
            "ModifyDBCluster",
            "ModifyDBClusterParameterGroup",
            "ModifyDBInstance",
            "ModifyDBSubnetGroup",
            "RebootDBInstance"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "route53resolver-rule"
        event_pattern_vars = {
          source = "route53resolver"
          events = ["DeleteResolverEndpoint", "DeleteResolverRule"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "secretsmanager-rule"
        event_pattern_vars = {
          source = "secretsmanager"
          events = ["DeleteTopic", "Unsubscribe"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ecs-rule"
        event_pattern_vars = {
          source = "ecs",
          events = ["DeleteCluster", "UpdateCluster"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name               = "cost-anomaly-detection-rule"
        event_pattern_file = "cost-anomaly-detection"
        targets            = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name               = "security-hub-notification-rule"
        event_pattern_file = "security-hub-notification"
        event_pattern_vars = {
          securityhub_severity = ["INFORMATIONAL", "LOW", "MEDIUM"]
        }
        targets = [{ type = "sns", name = "sns-alerts-security" }]
      },
      {
        name               = "security-hub-notification-rule-critical"
        event_pattern_file = "security-hub-notification"
        event_pattern_vars = {
          securityhub_severity = ["HIGH", "CRITICAL"]
        }
        targets = [{ type = "sns", name = "sns-alerts-critical" }]
      }
    ]
  }
}



C:\Users\Salma Sheref\Documents\GIT\vas-devops-pulse\src\terraform\pulse\eventbridge\sandbox.tfvars
eventbridge = {
  virginia = {
    rules = [
      {
        name = "acm-certificate-deletion-rule"
        event_pattern_vars = {
          source = "acm"
          events = ["DeleteCertificate"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "iam-rule"
        event_pattern_vars = {
          source = "iam"
          events = [
            "CreateAccessKey",
            "CreateUser",
            "DeleteAccessKey",
            "DeleteGroup",
            "DeleteUser",
            "RemoveUserFromGroup"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "organizations-rule"
        event_pattern_vars = {
          source = "organizations"
          events = [
            "CreateAccount",
            "CreateOrganization",
            "CreateOrganizationalUnit",
            "CreatePolicy",
            "DeleteOrganization",
            "DeleteOrganizationalUnit",
            "DeletePolicy",
            "DetachPolicy",
            "DisableAWSServiceAccess",
            "InviteAccountToOrganization",
            "LeaveOrganization",
            "MoveAccount",
            "RemoveAccountFromOrganization",
            "UpdateOrganizationalUnit",
            "UpdatePolicy"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "route53-rule"
        event_pattern_vars = {
          source = "route53"
          events = [
            "ChangeResourceRecordSets",
            "CreateHealthCheck",
            "CreateHostedZone",
            "DeleteHealthCheck",
            "DeleteHostedZone"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "s3-rule"
        event_pattern_vars = {
          source = "s3"
          events = [
            "DeleteBucket",
            "DeleteBucketEncryption",
            "DeleteBucketPolicy",
            "PutBucketPolicy"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "securityhub-rule"
        event_pattern_vars = {
          source = "securityhub"
          events = ["DisableSecurityHub"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      }
    ]
  }

  oregon = {
    rules = [
      {
        name = "acm-certificate-deletion-rule"
        event_pattern_vars = {
          source = "acm"
          events = ["DeleteCertificate"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "apigateway-rule"
        event_pattern_vars = {
          source = "apigateway"
          events = [
            "DeleteApiKey",
            "DeleteAuthorizer",
            "DeleteClientCertificate",
            "DeleteUsagePlan",
            "UpdateUsagePlan"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "autoscaling-rule"
        event_pattern_vars = {
          source = "autoscaling"
          events = ["DeleteScalingPolicy", "DeleteScheduledAction"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "backup-rule"
        event_pattern_vars = {
          source = "backup"
          events = ["DeleteBackupPlan", "DeleteBackupVault"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudformation-rule"
        event_pattern_vars = {
          source = "cloudformation"
          events = ["DeleteStack", "DeleteStackInstances", "DeleteStackSet"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudfront-rule"
        event_pattern_vars = {
          source = "cloudfront"
          events = [
            "CreateCloudFrontOriginAccessIdentity",
            "DeleteDistribution",
            "UpdateCloudFrontOriginAccessIdentity",
            "UpdateDistribution"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudtrail-rule"
        event_pattern_vars = {
          source = "cloudtrail"
          events = ["DeleteTrail", "StopLogging", "UpdateTrail"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "codebuild-rule"
        event_pattern_vars = {
          source = "codebuild"
          events = ["DeleteProject", "DeleteWebhook"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "config-rule"
        event_pattern_vars = {
          source = "config"
          events = [
            "DeleteConfigRule",
            "DeleteConfigurationAggregator",
            "DeleteConfigurationRecorder",
            "DeleteEvaluationResults",
            "DeleteRetentionConfiguration"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "dynamodb-rule"
        event_pattern_vars = {
          source = "dynamodb"
          events = ["DeleteTable"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ec2-rule"
        event_pattern_vars = {
          source = "ec2"
          events = [
            "CreateKeyPair",
            "CreateRoute",
            "CreateRouteTable",
            "DeleteInternetGateway",
            "DeleteKeyPair",
            "DeleteNatGateway",
            "DeleteRoute",
            "DeleteRouteTable",
            "DeleteSecurityGroup",
            "DeleteSubnet",
            "DeleteTransitGateway",
            "DeleteTransitGatewayRoute",
            "DeleteTransitGatewayRouteTable",
            "DeleteVpc",
            "DeleteVpcEndpoints",
            "DeleteVpcPeeringConnection",
            "DetachInternetGateway",
            "DetachVolume",
            "DisassociateRouteTable",
            "ModifySubnetAttribute",
            "ModifyVpcAttribute",
            "ReplaceRoute",
            "StopInstances",
            "TerminateInstances"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ecr-rule"
        event_pattern_vars = {
          source = "ecr"
          events = [
            "DeleteLifecyclePolicy",
            "DeleteRepository",
            "DeleteRepositoryPolicy"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "elasticache-rule"
        event_pattern_vars = {
          source = "elasticache"
          events = ["DeleteCacheCluster"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "elasticbeanstalk-rule"
        event_pattern_vars = {
          source = "elasticbeanstalk"
          events = ["DeleteApplication", "SwapEnvironmentCNAMEs"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "elasticloadbalancing-rule"
        event_pattern_vars = {
          source = "elasticloadbalancing"
          events = [
            "DeleteLoadBalancer",
            "DeleteLoadBalancerListeners",
            "DetachLoadBalancerFromSubnets",
            "DisableAvailabilityZonesForLoadBalancer",
            "ModifyLoadBalancerAttributes"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ses-rule"
        event_pattern_vars = {
          source = "ses"
          events = ["DeleteIdentity", "DeleteIdentity"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "events-rule"
        event_pattern_vars = {
          source = "events"
          events = ["DeleteIdentity", "DeleteIdentity"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "kms-rule"
        event_pattern_vars = {
          source = "kms"
          events = ["DisableKey", "ScheduleKeyDeletion"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudwatch-logs-rule"
        event_pattern_vars = {
          source = "logs"
          events = ["AssociateKmsKey"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudwatch-monitoring-rule"
        event_pattern_vars = {
          source = "monitoring"
          events = ["DeleteAlarms", "DeleteDashboards", "DisableAlarmActions"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "rds-rule"
        event_pattern_vars = {
          source = "rds"
          events = [
            "CreateDBCluster",
            "CreateDBInstance",
            "DeleteDBCluster",
            "DeleteDBClusterParameterGroup",
            "DeleteDBInstance",
            "DeleteDBSubnetGroup",
            "FailoverDBCluster",
            "ModifyDBCluster",
            "ModifyDBClusterParameterGroup",
            "ModifyDBInstance",
            "ModifyDBSubnetGroup",
            "RebootDBInstance"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "route53resolver-rule"
        event_pattern_vars = {
          source = "route53resolver"
          events = ["DeleteResolverEndpoint", "DeleteResolverRule"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "secretsmanager-rule"
        event_pattern_vars = {
          source = "secretsmanager"
          events = ["DeleteTopic", "Unsubscribe"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ecs-rule"
        event_pattern_vars = {
          source = "ecs",
          events = ["DeleteCluster", "UpdateCluster"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name               = "cost-anomaly-detection-rule"
        event_pattern_file = "cost-anomaly-detection"
        targets            = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name               = "databases-storage-alert-rule"
        event_pattern_file = "rds_instance_events"
        event_pattern_vars = {
          source = "rds",
          sourceArns = [
            "arn:aws:rds:us-west-2:792827266856:db:crud-users-db",
            "arn:aws:rds:us-west-2:792827266856:db:agsource-alta-gps",
            "arn:aws:rds:us-west-2:792827266856:cluster:datascience-platform-aurora-cluster",
            "arn:aws:rds:us-west-2:792827266856:cluster:platform-prod-aurora",
            "arn:aws:rds:us-west-2:792827266856:db:vas-db-genetics"
          ],
          events = [
            "RDS-EVENT-0089",
            "RDS-EVENT-0007",
            "RDS-EVENT-0227",
            "RDS-EVENT-0222"
          ]
        }
        targets = [
          {
            type = "sns",
            name = "vas-devops-events"
          }
        ]
      },
      {
        name               = "security-hub-notification-rule"
        event_pattern_file = "security-hub-notification"
        event_pattern_vars = {
          securityhub_severity = ["INFORMATIONAL", "LOW", "MEDIUM"]
        }
        targets = [{ type = "sns", name = "sns-alerts-security" }]
      },
      {
        name               = "security-hub-notification-rule-critical"
        event_pattern_file = "security-hub-notification"
        event_pattern_vars = {
          securityhub_severity = ["HIGH", "CRITICAL"]
        }
        targets = [{ type = "sns", name = "sns-alerts-critical" }]
      }
    ]
  }
}
















eventbridge = {
  virginia = {
    rules = [
      {
        name = "acm-certificate-deletion-rule"
        event_pattern_vars = {
          source = "acm"
          events = ["DeleteCertificate"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "iam-rule"
        event_pattern_vars = {
          source = "iam"
          events = [
            "CreateAccessKey",
            "CreateUser",
            "DeleteAccessKey",
            "DeleteGroup",
            "DeleteUser",
            "RemoveUserFromGroup"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "organizations-rule"
        event_pattern_vars = {
          source = "organizations"
          events = [
            "CreateAccount",
            "CreateOrganization",
            "CreateOrganizationalUnit",
            "CreatePolicy",
            "DeleteOrganization",
            "DeleteOrganizationalUnit",
            "DeletePolicy",
            "DetachPolicy",
            "DisableAWSServiceAccess",
            "InviteAccountToOrganization",
            "LeaveOrganization",
            "MoveAccount",
            "RemoveAccountFromOrganization",
            "UpdateOrganizationalUnit",
            "UpdatePolicy"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "route53-rule"
        event_pattern_vars = {
          source = "route53"
          events = [
            "ChangeResourceRecordSets",
            "CreateHealthCheck",
            "CreateHostedZone",
            "DeleteHealthCheck",
            "DeleteHostedZone"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "s3-rule"
        event_pattern_vars = {
          source = "s3"
          events = [
            "DeleteBucket",
            "DeleteBucketEncryption",
            "DeleteBucketPolicy",
            "PutBucketPolicy"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "securityhub-rule"
        event_pattern_vars = {
          source = "securityhub"
          events = ["DisableSecurityHub"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      }
    ]
  }

  oregon = {
    rules = [
      {
        name = "acm-certificate-deletion-rule"
        event_pattern_vars = {
          source = "acm"
          events = ["DeleteCertificate"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "apigateway-rule"
        event_pattern_vars = {
          source = "apigateway"
          events = [
            "DeleteApiKey",
            "DeleteAuthorizer",
            "DeleteClientCertificate",
            "DeleteUsagePlan",
            "UpdateUsagePlan"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "autoscaling-rule"
        event_pattern_vars = {
          source = "autoscaling"
          events = ["DeleteScalingPolicy", "DeleteScheduledAction"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "backup-rule"
        event_pattern_vars = {
          source = "backup"
          events = ["DeleteBackupPlan", "DeleteBackupVault"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudformation-rule"
        event_pattern_vars = {
          source = "cloudformation"
          events = ["DeleteStack", "DeleteStackInstances", "DeleteStackSet"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudfront-rule"
        event_pattern_vars = {
          source = "cloudfront"
          events = [
            "CreateCloudFrontOriginAccessIdentity",
            "DeleteDistribution",
            "UpdateCloudFrontOriginAccessIdentity",
            "UpdateDistribution"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudtrail-rule"
        event_pattern_vars = {
          source = "cloudtrail"
          events = ["DeleteTrail", "StopLogging", "UpdateTrail"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "codebuild-rule"
        event_pattern_vars = {
          source = "codebuild"
          events = ["DeleteProject", "DeleteWebhook"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "config-rule"
        event_pattern_vars = {
          source = "config"
          events = [
            "DeleteConfigRule",
            "DeleteConfigurationAggregator",
            "DeleteConfigurationRecorder",
            "DeleteEvaluationResults",
            "DeleteRetentionConfiguration"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "dynamodb-rule"
        event_pattern_vars = {
          source = "dynamodb"
          events = ["DeleteTable"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ec2-rule"
        event_pattern_vars = {
          source = "ec2"
          events = [
            "CreateKeyPair",
            "CreateRoute",
            "CreateRouteTable",
            "DeleteInternetGateway",
            "DeleteKeyPair",
            "DeleteNatGateway",
            "DeleteRoute",
            "DeleteRouteTable",
            "DeleteSecurityGroup",
            "DeleteSubnet",
            "DeleteTransitGateway",
            "DeleteTransitGatewayRoute",
            "DeleteTransitGatewayRouteTable",
            "DeleteVpc",
            "DeleteVpcEndpoints",
            "DeleteVpcPeeringConnection",
            "DetachInternetGateway",
            "DetachVolume",
            "DisassociateRouteTable",
            "ModifySubnetAttribute",
            "ModifyVpcAttribute",
            "ReplaceRoute",
            "StopInstances",
            "TerminateInstances"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ecr-rule"
        event_pattern_vars = {
          source = "ecr"
          events = [
            "DeleteLifecyclePolicy",
            "DeleteRepository",
            "DeleteRepositoryPolicy"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "elasticache-rule"
        event_pattern_vars = {
          source = "elasticache"
          events = ["DeleteCacheCluster"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "elasticbeanstalk-rule"
        event_pattern_vars = {
          source = "elasticbeanstalk"
          events = ["DeleteApplication", "SwapEnvironmentCNAMEs"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "elasticloadbalancing-rule"
        event_pattern_vars = {
          source = "elasticloadbalancing"
          events = [
            "DeleteLoadBalancer",
            "DeleteLoadBalancerListeners",
            "DetachLoadBalancerFromSubnets",
            "DisableAvailabilityZonesForLoadBalancer",
            "ModifyLoadBalancerAttributes"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ses-rule"
        event_pattern_vars = {
          source = "ses"
          events = ["DeleteIdentity", "DeleteIdentity"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "events-rule"
        event_pattern_vars = {
          source = "events"
          events = ["DeleteIdentity", "DeleteIdentity"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "kms-rule"
        event_pattern_vars = {
          source = "kms"
          events = ["DisableKey", "ScheduleKeyDeletion"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudwatch-logs-rule"
        event_pattern_vars = {
          source = "logs"
          events = ["AssociateKmsKey"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "cloudwatch-monitoring-rule"
        event_pattern_vars = {
          source = "monitoring"
          events = ["DeleteAlarms", "DeleteDashboards", "DisableAlarmActions"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "rds-rule"
        event_pattern_vars = {
          source = "rds"
          events = [
            "CreateDBCluster",
            "CreateDBInstance",
            "DeleteDBCluster",
            "DeleteDBClusterParameterGroup",
            "DeleteDBInstance",
            "DeleteDBSubnetGroup",
            "FailoverDBCluster",
            "ModifyDBCluster",
            "ModifyDBClusterParameterGroup",
            "ModifyDBInstance",
            "ModifyDBSubnetGroup",
            "RebootDBInstance"
          ]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "route53resolver-rule"
        event_pattern_vars = {
          source = "route53resolver"
          events = ["DeleteResolverEndpoint", "DeleteResolverRule"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "secretsmanager-rule"
        event_pattern_vars = {
          source = "secretsmanager"
          events = ["DeleteTopic", "Unsubscribe"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name = "ecs-rule"
        event_pattern_vars = {
          source = "ecs",
          events = ["DeleteCluster", "UpdateCluster"]
        }
        targets = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name               = "cost-anomaly-detection-rule"
        event_pattern_file = "cost-anomaly-detection"
        targets            = [{ type = "sns", name = "vas-devops-events" }]
      },
      {
        name               = "databases-storage-alert-rule"
        event_pattern_file = "rds_instance_events"
        event_pattern_vars = {
          source = "rds",
          sourceArns = [
            "arn:aws:rds:us-west-2:512438066734:db:pulse-feed",
            "arn:aws:rds:us-west-2:512438066734:db:vas-db-genetics",
            "arn:aws:rds:us-west-2:512438066734:db:vas-db-pulse",
            "arn:aws:rds:us-west-2:512438066734:db:platform-staging-partners-replica-1",
            "arn:aws:rds:us-west-2:512438066734:db:platform-staging-replica-1"
          ],
          events = [
            "RDS-EVENT-0089",
            "RDS-EVENT-0007",
            "RDS-EVENT-0227",
            "RDS-EVENT-0222"
          ]
        }
        targets = [
          {
            type = "sns",
            name = "vas-devops-events"
          }
        ]
      },
      {
        name               = "security-hub-notification-rule"
        event_pattern_file = "security-hub-notification"
        targets            = [{ type = "sns", name = "sns-alerts-security" }]
      }
    ]
  }
}




Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ grep -R "databases-storage-alert-rule" src/terraform/pulse/
src/terraform/pulse/eventbridge/mangement.tfvars:        name               = "databases-storage-alert-rule"
src/terraform/pulse/eventbridge/prod.tfvars:        name               = "databases-storage-alert-rule"
src/terraform/pulse/eventbridge/sandbox.tfvars:        name               = "databases-storage-alert-rule"
src/terraform/pulse/eventbridge/staging.tfvars:        name               = "databases-storage-alert-rule"

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ grep -R "vas-devops-events" src/terraform/pulse/
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:        targets            = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/mangement.tfvars:            name = "vas-devops-events"
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:        targets            = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/prod.tfvars:            name = "vas-devops-events"
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:        targets            = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/sandbox.tfvars:            name = "vas-devops-events"
src/terraform/pulse/eventbridge/security.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/security.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:        targets            = [{ type = "sns", name = "vas-devops-events" }]
src/terraform/pulse/eventbridge/staging.tfvars:            name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/logs-prod.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/logs-prod.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/logs.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/logs.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/management.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/management.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/prod.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/prod.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/sandbox.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/sandbox.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/security.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/security.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/staging.tfvars:        topic_name = "vas-devops-events"
src/terraform/pulse/messaging/sns-sqs/staging.tfvars:        topic_name = "vas-devops-events"

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$


grep -R "databases-storage-alert-rule" src/terraform/pulse/
and also:

bash
Copy code
grep -R "vas-devops-events" src/terraform/pulse/

Salma Sheref@SalmaSheref MINGW64 ~
$ aws events list-targets-by-rule --rule databases-storage-alert-rule  --region us-west-2
{
    "Targets": [
        {
            "Id": "terraform-20250513213219216100000001",
            "Arn": "arn:aws:sns:us-west-2:792827266856:vas-devops-events"
        }
    ]
}


Salma Sheref@SalmaSheref MINGW64 ~
$


aws events list-targets-by-rule --rule databases-storage-alert-rule  --region us-west-2


Salma Sheref@SalmaSheref MINGW64 ~
$ aws events list-rules --region us-west-2 --output table | grep -i genetics -A5
||  arn:aws:events:us-west-2:792827266856:rule/databases-storage-alert-rule                                    |  General event                                                                                                                            |  default      |  {"detail":{"EventID":["RDS-EVENT-0089","RDS-EVENT-0007","RDS-EVENT-0227","RDS-EVENT-0222"],"SourceArn":["arn:aws:rds:us-west-2:792827266856:db:crud-users-db","arn:aws:rds:us-west-2:792827266856:db:agsource-alta-gps","arn:aws:rds:us-west-2:792827266856:cluster:datascience-platform-aurora-cluster","arn:aws:rds:us-west-2:792827266856:cluster:platform-prod-aurora","arn:aws:rds:us-west-2:792827266856:db:vas-db-genetics"]},"detail-type":["RDS DB Instance Event"],"source":["aws.rds"]}                                                                                                                                      |                                       |  databases-storage-alert-rule                                     |                                                           |                       |  ENABLED   ||
||  arn:aws:events:us-west-2:792827266856:rule/datascience-database-refr-DeleteDashinstancesStepFu-rmmGWh2UkOXB|                                                                                                                                           |  default      ||                                       |  datascience-database-refr-DeleteDashinstancesStepFu-rmmGWh2UkOXB |                                                           |  rate(30 days)        |  ENABLED   ||
||  arn:aws:events:us-west-2:792827266856:rule/dms-task-failure-rule                                           |  General event                                                                                                                            |  default      |  {"detail":{"ReplicationTaskStatus":["failed"]},"detail-type":["DMS Replication Task State Change"],"source":["aws.dms"]}                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                |                                       |  dms-task-failure-rule                                            |                                                           |                       |  ENABLED   ||
||  arn:aws:events:us-west-2:792827266856:rule/dynamodb-rule                                                   |  General event                                                                                                                            |  default      |  {"detail":{"eventName":["DeleteTable"],"eventSource":["dynamodb.amazonaws.com"]},"detail-type":["AWS API Call via CloudTrail"],"source":["aws.dynamodb"]}                                                                                                                                                                                                                                                                                                                                                                                                                                                                               |                                       |  dynamodb-rule                                                    |                                                           |                       |  ENABLED   ||
||  arn:aws:events:us-west-2:792827266856:rule/ec2-rule                                                        |  General event                                                                                                                            |  default      |  {"detail":{"eventName":["CreateKeyPair","CreateRoute","CreateRouteTable","DeleteInternetGateway","DeleteKeyPair","DeleteNatGateway","DeleteRoute","DeleteRouteTable","DeleteSecurityGroup","DeleteSubnet","DeleteTransitGateway","DeleteTransitGatewayRoute","DeleteTransitGatewayRouteTable","DeleteVpc","DeleteVpcEndpoints","DeleteVpcPeeringConnection","DetachInternetGateway","DetachVolume","DisassociateRouteTable","ModifySubnetAttribute","ModifyVpcAttribute","ReplaceRoute","StopInstances","TerminateInstances"],"eventSource":["ec2.amazonaws.com"]},"detail-type":["AWS API Call via CloudTrail"],"source":["aws.ec2"]}  |                                       |  ec2-rule                                                         |                                                           |                       |  ENABLED   ||
||  arn:aws:events:us-west-2:792827266856:rule/ecr-rule                                                        |  General event                                                                                                                            |  default      |  {"detail":{"eventName":["DeleteLifecyclePolicy","DeleteRepository","DeleteRepositoryPolicy"],"eventSource":["ecr.amazonaws.com"]},"detail-type":["AWS API Call via CloudTrail"],"source":["aws.ecr"]}                                                                                                                                                                                                                                                                                                                                                                                                                                   |                                       |  ecr-rule                                                         |                                                           |                       |  ENABLED   ||

Salma Sheref@SalmaSheref MINGW64 ~
$









aws events list-rules --region us-west-2 --output table | grep -i genetics -A5


Salma Sheref@SalmaSheref MINGW64 ~
$ aws events list-rules --region us-west-2 | grep genetics
            "EventPattern": "{\"detail\":{\"EventID\":[\"RDS-EVENT-0089\",\"RDS-EVENT-0007\",\"RDS-EVENT-0227\",\"RDS-EVENT-0222\"],\"SourceArn\":[\"arn:aws:rds:us-west-2:792827266856:db:crud-users-db\",\"arn:aws:rds:us-west-2:792827266856:db:agsource-alta-gps\",\"arn:aws:rds:us-west-2:792827266856:cluster:datascience-platform-aurora-cluster\",\"arn:aws:rds:us-west-2:792827266856:cluster:platform-prod-aurora\",\"arn:aws:rds:us-west-2:792827266856:db:vas-db-genetics\"]},\"detail-type\":[\"RDS DB Instance Event\"],\"source\":[\"aws.rds\"]}",

Salma Sheref@SalmaSheref MINGW64 ~
$ aws scheduler list-schedules --region us-west-2 | grep genetics

Salma 




aws events list-rules --region us-west-2 | grep genetics
aws events list-targets-by-rule --rule <RULE_NAME> --region us-west-2
or if using the new Scheduler:

bash
Copy code
aws scheduler list-schedules --region us-west-2 | grep genetics

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ grep -R "aws_cloudwatch_event_rule" src/terraform/pulse/

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ grep -R "aws_cloudwatch_event_target" src/terraform/pulse/

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ grep -R "aws_scheduler_schedule" src/terraform/pulse/

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ grep -R "RunTask" src/terraform/pulse/
src/terraform/pulse/security/iam/role_policies/ecs-events-policy.json:            "ecs:RunTask"

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)




# look for eventbridge resources
grep -R "aws_cloudwatch_event_rule" src/terraform/pulse/

# look for event targets (likely ecs:RunTask)
grep -R "aws_cloudwatch_event_target" src/terraform/pulse/

# look for scheduler (newer replacement for EB rule)
grep -R "aws_scheduler_schedule" src/terraform/pulse/

# look for run-task actions
grep -R "RunTask" src/terraform/pulse/




Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ grep -R  genetics_sync* src/terraform/pulse/
src/terraform/pulse/compute/ecs/fargate/genetics-sync-microservice/main.tf:        secret_GeneticsConnection = data.terraform_remote_state.secrets.outputs.secrets_arns["rds_mysql_genetics_sync_connection_url_secret"]
src/terraform/pulse/compute/ecs/fargate/genetics-sync-microservice/main.tf:        secret_SerilogApiKey      = data.terraform_remote_state.secrets.outputs.secrets_arns["serilog_genetics_sync_api_secret"]
src/terraform/pulse/container/ecr/prod.tfvars:  genetics_sync = {
src/terraform/pulse/container/ecr/sandbox.tfvars:  genetics_sync = {
src/terraform/pulse/container/ecr/staging.tfvars:  genetics_sync = {
src/terraform/pulse/env-backup/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-data/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-logs/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-logs-prod/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-management/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-morpheus/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-prod/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-sandbox/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-staging/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/monitoring/cloudwatch/dashboards/variables.tf:    genetics_sync_service_name_statefile    = string
src/terraform/pulse/security/secrets-manager/prod.tfvars:    key_name    = "rds_mysql_genetics_sync_connection_url_secret"
src/terraform/pulse/security/secrets-manager/prod.tfvars:    key_name    = "serilog_genetics_sync_api_secret"
src/terraform/pulse/security/secrets-manager/sandbox.tfvars:    key_name    = "rds_mysql_genetics_sync_connection_url_secret"
src/terraform/pulse/security/secrets-manager/sandbox.tfvars:    key_name    = "serilog_genetics_sync_api_secret"
src/terraform/pulse/security/secrets-manager/staging.tfvars:    key_name    = "rds_mysql_genetics_sync_connection_url_secret"
src/terraform/pulse/security/secrets-manager/staging.tfvars:    key_name    = "serilog_genetics_sync_api_secret"

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
$ grep -R  genetics_sync* src/terraform/pulse/
src/terraform/pulse/compute/ecs/fargate/genetics-sync-microservice/main.tf:        secret_GeneticsConnection = data.terraform_remote_state.secrets.outputs.secrets_arns["rds_mysql_genetics_sync_connection_url_secret"]
src/terraform/pulse/compute/ecs/fargate/genetics-sync-microservice/main.tf:        secret_SerilogApiKey      = data.terraform_remote_state.secrets.outputs.secrets_arns["serilog_genetics_sync_api_secret"]
src/terraform/pulse/container/ecr/prod.tfvars:  genetics_sync = {
src/terraform/pulse/container/ecr/sandbox.tfvars:  genetics_sync = {
src/terraform/pulse/container/ecr/staging.tfvars:  genetics_sync = {
src/terraform/pulse/env-backup/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-data/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-logs/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-logs-prod/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-management/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-morpheus/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-prod/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-sandbox/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/env-staging/global.tfvars:  genetics_sync_service_name_statefile    = "terraform/pulse/compute/fargate/genetics-sync-microservice/terraform.tfstate"
src/terraform/pulse/monitoring/cloudwatch/dashboards/variables.tf:    genetics_sync_service_name_statefile    = string
src/terraform/pulse/security/secrets-manager/prod.tfvars:    key_name    = "rds_mysql_genetics_sync_connection_url_secret"
src/terraform/pulse/security/secrets-manager/prod.tfvars:    key_name    = "serilog_genetics_sync_api_secret"
src/terraform/pulse/security/secrets-manager/sandbox.tfvars:    key_name    = "rds_mysql_genetics_sync_connection_url_secret"
src/terraform/pulse/security/secrets-manager/sandbox.tfvars:    key_name    = "serilog_genetics_sync_api_secret"
src/terraform/pulse/security/secrets-manager/staging.tfvars:    key_name    = "rds_mysql_genetics_sync_connection_url_secret"
src/terraform/pulse/security/secrets-manager/staging.tfvars:    key_name    = "serilog_genetics_sync_api_secret"

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3503-Decommission-genetics-sync-fargate-task-EB-Rule)
