#!/bin/bash
set -euo pipefail

echo "🔍 Extracting secrets used in ECS task definitions…"

# 1. Grab all valueFrom secrets (e.g., ${secret_DefaultConnection})
grep -Roh '"valueFrom": *"\${secret_[^}]*}' src/terraform/pulse/compute/ecs/fargate/ \
  | sed -E 's/.*\${secret_([^}]*)}.*/secret_\1/' \
  | sort -u > /tmp/ecs_secrets.txt

echo "✅ Found $(wc -l < /tmp/ecs_secrets.txt) ECS secrets"
echo

# 2. Grab all actual AWS Secrets Manager names defined in Terraform
grep -Roh 'aws_secretsmanager_secret\.[^"]*' src/terraform/pulse/security/secrets-manager/ \
  | sed -E 's/.*aws_secretsmanager_secret\.([^" ]*).*/\1/' \
  | sort -u > /tmp/terraform_secrets.txt

echo "✅ Found $(wc -l < /tmp/terraform_secrets.txt) Terraform secrets"
echo

# 3. Compare the two lists to see what ECS tasks reference vs what exists
echo "🔎 Checking which ECS secrets are defined in Terraform…"
missing=$(comm -23 /tmp/ecs_secrets.txt /tmp/terraform_secrets.txt || true)

if [[ -n "$missing" ]]; then
    echo "⚠️ The following ECS secrets were referenced but not found in Terraform definitions:"
    echo "$missing"
else
    echo "✅ All ECS secrets have matching Terraform definitions"
fi

echo
echo "📋 ECS secrets used (from task defs):"
cat /tmp/ecs_secrets.txt



Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3219-Over-permissive-secret-policy)
$ ./script.sh
🔍 Extracting secrets used in ECS task definitions…
sed: -e expression #1, char 35: Invalid content of \{\}


echo
echo "📋 Terraform secrets defined:"
cat /tmp/terraform_secrets.txt
