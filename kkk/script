âœ… We reviewed the ECS task execution role (src/terraform/pulse/security/iam/role_policies/pulse-cluster-task-execution-role-policy.json) and gathered the full list of required secrets from the ECS task definitions.

Extracted secret list:

secret_AwsAccessKey

secret_AwsSecretKey

secret_AwsRedisUrl

secret_DefaultConnection

secret_ReadonlyConnection

secret_KeyStorePassword

secret_RaygunApiKey

secret_SerilogApiKey

secret_SlackWebhook

secret_email_username

secret_email_password

secret_PartnersApiKey

secret_ScotMovesUsername

secret_ScotMovesPassword

secret_ScotMovesApiKey

secret_SdkAwsAccessKey

secret_SdkAwsSecretKey

secret_SdkGeocoding

secret_MessagingSdkAwsAccessKey

secret_MessagingSdkAwsSecretKey

secret_StorageSdkAwsAccessKey

secret_StorageSdkAwsSecretKey

secret_GeneticsConnection

secret_UrusConnection

secret_c2c_shared_secret

Per discussion with Alex and Lars, this work will be deferred until after migrations. A new post-migration ticket will be created with Sheela to properly scope down the permissions using the above secret list.

ðŸ”— Follow-up will be tracked in [DEVOPS-####] (to be updated once Sheela creates the new ticket).

Closing this ticket as the follow-up will be tracked separately.

















Hi Sheela, following up on Alexâ€™s note â€” we need to create a new post-migration ticket to address the ECS task execution role permission issues. Iâ€™ve already compiled the full list of required secrets, and Iâ€™ll include that in the new ticket. Can we work together to get this ticket created?


Title: Scope down ECS Task Execution Role Secret Access (Post-Migration)

Background:
During review of src/terraform/pulse/security/iam/role_policies/pulse-cluster-task-execution-role-policy.json, we identified that the ECS task execution role currently has overly permissive access to Secrets Manager (wildcard service/*). This poses a risk as the role may access secrets it does not require.

Task:

Restrict ECS task execution role to only the secrets actually required by ECS tasks.

Use the compiled list of secrets (see below) instead of wildcard access.



poke to Lars about this in standup.  We decided to wait until after migrations so we aren't trying to jungle too many things.  Salma as we discussed please work with Sheela to create a new post-migration ticket to address these permission issues and please include the list of secrets that you gathered.
thanks!

or now, i reverted the changes (until tested) so that i can deploy Carlos' changes


Iâ€™m moving this back to in-progress.  It does not address all of the permission issues that were identified such as access to all secrets and APIs

arn:aws:secretsmanager:${region}:${account_id}:secret:*
arn:aws:iam::aws:policy/SecretsManagerReadWrite
AmazonAPIGatewayAdministrator

Hi Alex â€” Iâ€™d like to open a group chat with you, Caleb, and Matias to review the ECS secrets list I compiled. Could you please share Matiasâ€™ email/contact so I can include him?  

Hi all â€” Iâ€™ve created the PR for DEVOPS-3219.  
I reviewed all ECS task definitions, extracted the secrets from `valueFrom`, mapped them to our Terraform-managed secrets, and updated the execution role policy to use explicit ARNs instead of a wildcard.  

Now Iâ€™d like to validate the final secrets list with you, Caleb/Matias, to make sure nothing is missing. Could you please review and confirm?  


## Background [DEVOPS-3219]
The ECS task execution role policy was previously using a wildcard (`*`) in Secrets Manager access, which was overly permissive.  

As part of this update, I identified all ECS-related secrets by:
- Grepping ECS task definition `valueFrom` references.
- Mapping those variables to the corresponding Terraform-managed secrets.
- Verifying against the existing secrets in our repo and AWS account.

I then replaced the wildcard in `pulse-cluster-task-execution-role-policy.json` with explicit ARNs for each required secret. This ensures the role now only has access to the exact secrets ECS services need.

## Pending
- No pending work. The policy is now least-privileged.
- Further refinements, if any new ECS services are added, will require updating this list.

## Diagrams and Screenshots
N/A (policy change only).

## Checklist
- [x] Verified secrets list via grep + Terraform references.
- [x] Updated IAM role policy to reference exact ARNs.
- [x] Validated JSON syntax.
- [ ] Deployed to sandbox to confirm ECS task execution is not broken.




Update ECS task execution role policy with explicit secret ARNs instead of wildcard (DEVOPS-3219)


ok.  can you please test these changes in a lower env to make sure they work? (edited) 


I scoped the role using the AWS-recommended Elastic Beanstalk service-role policies instead of the broad admin policy.
This role is specifically used for Elastic Beanstalk deployments, while instance roles continue to handle any app-specific permissions.

GM Salma, how did you determine the appropriate permissions for this role and what is using this role?



"Resource": [
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/pulse/aws/accesskey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/pulse/aws/accesskeysecret/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/*/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/*/mysql/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/*/mysql/readonly-connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/general/certificates/vas-com/password/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/email/username/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/email/password/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/partners/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/*/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/*/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/slack/webhook/*/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/scotmoves/username/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/scotmoves/password/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/scotmoves/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/general/google-geocoding/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/sdk/storage/accesskey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/sdk/storage/secretkey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/pulse/aws/sdk/accesskey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/pulse/aws/sdk/accesskeysecret/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/genetics-etl/mysql/urus-connections-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/genetics/mysql/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/general/c2c/shared-secret/*"
]





{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Sid": "AllowWriteLogs",
            "Action": [
                "logs:PutLogEvents",
                "logs:CreateLogStream",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups",
                "logs:DescribeLogStreams"
            ],
            "Effect": "Allow",
            "Resource": "arn:aws:logs:${region}:${account_id}:log-group:/aws/ecs/fargate/service/*"
        },
        {
            "Sid": "AllowECRActions",
            "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchGetImage",
                "ecr:GetDownloadUrlForLayer"
            ],
            "Effect": "Allow",
            "Resource": "*"
        },
        {
            "Sid": "AllowGetECRImages",
            "Action": [
                "ecr:DescribeRepositories",
                "ecr:DescribeImages",
                "ecr:ListImages",
                "ecr:GetRepositoryPolicy",
                "ecr:BatchCheckLayerAvailability"
            ],
            "Effect": "Allow",
            "Resource": ${ecr_repo_list}
        },
        {
            "Sid": "SecretManagerAccess",
            "Action": [
                "kms:Decrypt",
                "secretsmanager:GetSecretValue"
            ],
            "Effect": "Allow",
            "Resource": [ 
                "arn:aws:secretsmanager:${region}:${account_id}:secret:service/*",
                "arn:aws:kms:${region}:${account_id}:key/${kms_alias}"
            ]
        },
        {
            "Sid": "DenyDeleteAllBuckets",
            "Action": [
              "s3:DeleteBucket"
            ],
            "Effect": "Deny",
            "Resource": [
              "arn:aws:s3:::*"
            ]
        }
    ]
}


src\terraform\pulse\security\iam\role_policies\pulse-cluster-task-execution-role-policy.json























"Resource": [
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/pulse/aws/accesskey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/pulse/aws/accesskeysecret/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/alerts/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/auth/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/feed/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/feednext/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/genetics/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/herd/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/monolith/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/onpremise-sync/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/ops/redis/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/parlors/redis/connection-string/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/auth/mysql/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/parlors/mysql/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/ops/mysql/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/jobsrunner/mysql/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/feed/mysql/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/herd/mysql/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/genetics/mysql/connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/pulse/mysql/migrations/connection/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/auth/mysql/readonly-connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/feed/mysql/readonly-connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/herd/mysql/readonly-connection-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/genetics/mysql/readonly-connection-string/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/general/certificates/vas-com/password/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/email/username/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/email/password/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/partners/apikey/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/alerts/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/auth/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/feed/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/feednext/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/genetics/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/herd/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/monolith/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/onpremise-sync/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/ops/raygun/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/parlors/raygun/apikey/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/alerts/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/auth/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/feed/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/feednext/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/genetics/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/herd/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/monolith/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/onpremise-sync/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/ops/seq/apikey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/parlors/seq/apikey/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/slack/webhook/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/scotmoves/username/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/scotmoves/password/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/scotmoves/apikey/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/general/google-geocoding/apikey/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/sdk/storage/accesskey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/sdk/storage/secretkey/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/pulse/aws/sdk/accesskey/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/pulse/aws/sdk/accesskeysecret/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/genetics-etl/mysql/urus-connections-string/*",
  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/genetics/mysql/connection-string/*",

  "arn:aws:secretsmanager:${region}:${account_id}:secret:service/general/c2c/shared-secret/*"
]
