primary_vpc = {
  vpc_cidr = "10.150.0.0/16"
  vpc_name = "pulse-main-vpc"

  # VPC Peering will be deployed in the second iteration of VPC configuration
  vpc_peering = [
    # Requires acceptance of the peering in prod
    {
      pcx_name        = "pcx:vas-platform-default"
      peer_account_id = 221515991534
      peer_vpc_id     = "vpc-9cf2d0f9"
    },
    {
      pcx_name        = "pcx:integrations-vpc-prod"
      peer_account_id = 221515991534
      peer_vpc_id     = "vpc-0f237a5d1161f382e"
    },
  ]

  elastic_ips = [
    "eip-natgateway-az-2a",
    "eip-natgateway-az-2b",
    "eip-natgateway-az-2c",
    "eip-natgateway-az-2d",
  ]

  endpoints = {
    gateway = [
      "s3",
      "dynamodb",
    ]
    "interface" = []
  }

  nat_gateways = [
    {
      eip    = "eip-natgateway-az-2a"
      name   = "natgateway-az-2a-nat"
      subnet = "public-natgateway-az-2a-subnet"
    },
    {
      eip    = "eip-natgateway-az-2b"
      name   = "natgateway-az-2b-nat"
      subnet = "public-natgateway-az-2b-subnet"
    },
    {
      eip    = "eip-natgateway-az-2c"
      name   = "natgateway-az-2c-nat"
      subnet = "public-natgateway-az-2c-subnet"
    },
    {
      eip    = "eip-natgateway-az-2d"
      name   = "natgateway-az-2d-nat"
      subnet = "public-natgateway-az-2d-subnet"
    },
  ]

  route_tables = [
    {
      name = "public-natgateway-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target_type = "igw"
        },
      ]
    },
    {
      name = "public-alb-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target_type = "igw"
        },
        {
          destination = "172.31.0.0/23"
          target      = "pcx-0d1330e1a98164b77" # pulse-main-vpc:pcx:vas-platform-default
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-a and private-data-az-b subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-b and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-b and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ecs-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow ecs to access private-data-az-b and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ecs to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ECS to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-ec2-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-ec2-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-ec2-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-ec2-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-lambda-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access private-data-az-a/b (platform-aurora database) subnets in VAS Platform Default (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "	pcx-0d1330e1a98164b77"
          target_type = "pcx"
        }
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-lambda-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access private-data-az-a/b (platform-aurora database) subnets in VAS Platform Default (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "	pcx-0d1330e1a98164b77"
          target_type = "pcx"
        }
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-lambda-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access private-data-az-a/b (platform-aurora database) subnets in VAS Platform Default (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "	pcx-0d1330e1a98164b77"
          target_type = "pcx"
        }
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-lambda-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow lambda to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow lambda to access private-data-az-a/b (platform-aurora database) subnets in VAS Platform Default (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "	pcx-0d1330e1a98164b77"
          target_type = "pcx"
        }
        # { # Allow lambdas to access EC2 subnets in pulse-logs-prod
        #   destination = "10.152.40.0/23"
        #   target      = "pcx-0a25f14b4339c23c7"
        #   target_type = "pcx"
        # }
      ]
    },
    {
      name = "private-database-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-database-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-database-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-database-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow EB to access private-data-az-a and private-data-az-a subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow eb to access private-data-az-a and private-data-az-b subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-beanstalk-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow EB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow EB to access EC2 subnets in pulse-logs-prod
          destination = "10.152.40.0/23"
          target      = "pcx-0a25f14b4339c23c7"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnets in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnet in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnet in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "data-ec2-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow ec2s to access private-data-az-a and private-data-az-b subnet in VAS Platform Default VPC (VAS Main Account)
          destination = "172.31.14.0/23"
          target      = "pcx-0d1330e1a98164b77"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ec2s to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      # NLB, ALB, LB for EB allow traffic between AWS resources, no internet
      name = "private-alb-rt"
      routes = [
        { # Allow ALB to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ALB to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ALB to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow ALB to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod VPC (2215 Account Lambdas)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      # MongoDB? Migrate?
      name = "private-service-rt"
      routes = [
        { # Allow service to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow service to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow service to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow service to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name   = "private-tgw-subnet-az-2a-rt"
      routes = []
    },
    {
      name   = "private-tgw-subnet-az-2b-rt"
      routes = []
    },
    {
      name   = "private-tgw-subnet-az-2c-rt"
      routes = []
    },
    {
      name   = "private-tgw-subnet-az-2d-rt"
      routes = []
    },
    {
      name = "private-dms-subnet-az-2a-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2a-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-dms-subnet-az-2b-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2b-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-dms-subnet-az-2c-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2c-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    },
    {
      name = "private-dms-subnet-az-2d-rt"
      routes = [
        {
          destination = "0.0.0.0/0"
          target      = "natgateway-az-2d-nat"
          target_type = "natgw"
        },
        { # Allow dms to access integrations-vpc-private-prod-a subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.2.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-b subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.4.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-c subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.6.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        },
        { # Allow dms to access integrations-vpc-private-prod-d subnet in integrations-vpc-prod (VAS Main Account)
          destination = "10.30.8.0/24"
          target      = "pcx-07b9011fcb953f9ac"
          target_type = "pcx"
        }
      ]
    }
  ]

  subnets = [
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.0.0/22"
      name        = "private-ecs-az-2a-subnet-01"
      route_table = "private-ecs-subnet-az-2a-rt"
      nacl_rule   = "private-ecs"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.4.0/22"
      name        = "private-ecs-az-2b-subnet-01"
      route_table = "private-ecs-subnet-az-2b-rt"
      nacl_rule   = "private-ecs"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.8.0/22"
      name        = "private-ecs-az-2c-subnet-01"
      route_table = "private-ecs-subnet-az-2c-rt"
      nacl_rule   = "private-ecs"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.12.0/22"
      name        = "private-ecs-az-2d-subnet-01"
      route_table = "private-ecs-subnet-az-2d-rt"
      nacl_rule   = "private-ecs"
    },
    # 4 CIDR blocks reserved (10.150.16.0/22, 10.150.20.0/22, 10.150.24.0/22, 10.150.28.0/22)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.32.0/24"
      name        = "private-database-az-2a-subnet-01"
      route_table = "private-database-subnet-az-2a-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.33.0/24"
      name        = "private-database-az-2b-subnet-01"
      route_table = "private-database-subnet-az-2b-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.34.0/24"
      name        = "private-database-az-2c-subnet-01"
      route_table = "private-database-subnet-az-2c-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.35.0/24"
      name        = "private-database-az-2d-subnet-01"
      route_table = "private-database-subnet-az-2d-rt"
      nacl_rule   = "private-database"
    },
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.36.0/25"
      name        = "private-dms-az-2a-subnet-01"
      route_table = "private-dms-subnet-az-2a-rt"
      nacl_rule   = "private-dms"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.36.128/25"
      name        = "private-dms-az-2b-subnet-01"
      route_table = "private-dms-subnet-az-2b-rt"
      nacl_rule   = "private-dms"
    },
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.37.0/25"
      name        = "private-dms-az-2c-subnet-01"
      route_table = "private-dms-subnet-az-2c-rt"
      nacl_rule   = "private-dms"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.37.128/25"
      name        = "private-dms-az-2d-subnet-01"
      route_table = "private-dms-subnet-az-2d-rt"
      nacl_rule   = "private-dms"
    },
    # 4 CIDR blocks reserved (10.150.38.0/25, 10.150.38.128/25, 10.150.39.0/25, 10.150.39.128/25)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.40.0/24"
      name        = "private-ec2-az-2a-subnet-01"
      route_table = "private-ec2-subnet-az-2a-rt"
      nacl_rule   = "private-ec2"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.41.0/24"
      name        = "private-ec2-az-2b-subnet-01"
      route_table = "private-ec2-subnet-az-2b-rt"
      nacl_rule   = "private-ec2"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.42.0/24"
      name        = "private-ec2-az-2c-subnet-01"
      route_table = "private-ec2-subnet-az-2c-rt"
      nacl_rule   = "private-ec2"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.43.0/24"
      name        = "private-ec2-az-2d-subnet-01"
      route_table = "private-ec2-subnet-az-2d-rt"
      nacl_rule   = "private-ec2"
    },
    # 4 CIDR blocks reserved (10.150.44.0/24, 10.150.45.0/24, 10.150.46.0/24, 10.150.47.0/24)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.48.0/20"
      name        = "private-lambda-az-2a-subnet-01"
      route_table = "private-lambda-subnet-az-2a-rt"
      nacl_rule   = "private-lambda"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.64.0/20"
      name        = "private-lambda-az-2b-subnet-01"
      route_table = "private-lambda-subnet-az-2b-rt"
      nacl_rule   = "private-lambda"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.80.0/20"
      name        = "private-lambda-az-2c-subnet-01"
      route_table = "private-lambda-subnet-az-2c-rt"
      nacl_rule   = "private-lambda"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.96.0/20"
      name        = "private-lambda-az-2d-subnet-01"
      route_table = "private-lambda-subnet-az-2d-rt"
      nacl_rule   = "private-lambda"
    },
    # 4 CIDR blocks reserved (10.150.112.0/21, 10.150.120.0/21, 10.150.128.0/21, 10.150.136.0/21)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.144.0/25"
      name        = "private-beanstalk-az-2a-subnet-01"
      route_table = "private-beanstalk-subnet-az-2a-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.144.128/25"
      name        = "private-beanstalk-az-2b-subnet-01"
      route_table = "private-beanstalk-subnet-az-2b-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.145.0/25"
      name        = "private-beanstalk-az-2c-subnet-01"
      route_table = "private-beanstalk-subnet-az-2c-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.145.128/25"
      name        = "private-beanstalk-az-2d-subnet-01"
      route_table = "private-beanstalk-subnet-az-2d-rt"
      nacl_rule   = "elastic-beanstalk"
    },
    # 4 CIDR blocks reserved (10.150.146.0/23, 10.150.148.0/23, 10.150.150.0/23, 10.150.152.0/23)
    # This subnets only has local access in his route table, no NG or IG present so no incoming or outgoing traffic for internet.
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.154.0/26"
      name        = "private-service-az-2a-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.154.64/26"
      name        = "private-service-az-2b-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.154.128/26"
      name        = "private-service-az-2c-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.154.192/26"
      name        = "private-service-az-2d-subnet"
      route_table = "private-service-rt"
      nacl_rule   = "private-service"
    },
    # 4 CIDR blocks reserved from 10.150.155.0 to 10.150.155.254
    # Used for internal ALBs.
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.155.0/26"
      name        = "private-alb-az-2a-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.155.64/26"
      name        = "private-alb-az-2b-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.155.128/26"
      name        = "private-alb-az-2c-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.155.192/26"
      name        = "private-alb-az-2d-subnet-01"
      route_table = "private-alb-rt"
      nacl_rule   = "private-alb"
    },
    # 4 CIDR blocks reserved 10.150.156.0/24 - 10.150.157.0/24 - 10.150.158.0/24 (AWS Network Firewall etc.)
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.159.0/28"
      name        = "public-natgateway-az-2a-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.159.16/28"
      name        = "public-natgateway-az-2b-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.159.32/28"
      name        = "public-natgateway-az-2c-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.159.48/28"
      name        = "public-natgateway-az-2d-subnet"
      route_table = "public-natgateway-rt"
      nacl_rule   = "allow-everything"
    },
    # 4 CIDR blocks reserved 10.150.159.64/28 - 10.150.159.80/28 - 10.150.159.96/28 - 10.150.159.112/28 - 10.150.159.128/25
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.160.0/24"
      name        = "public-alb-az-2a-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.161.0/24"
      name        = "public-alb-az-2b-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.162.0/24"
      name        = "public-alb-az-2c-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.163.0/24"
      name        = "public-alb-az-2d-subnet-01"
      route_table = "public-alb-rt"
      nacl_rule   = "allow-everything"
    },
    # 4 CIDR blocks reserved (10.x.164.0/24, 10.x.165.0/24, 10.x.166.0/24, 10.x.167.0/24)
    # data-ec2 10.x.168.0/26, 10.x.168.64/26, 10.x.168.128/26, 10.x.168.192/26 - Internal EC2's that don't need internet access and talk to the DATABASE!
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.168.0/26"
      name        = "data-ec2-az-2a-subnet-01"
      route_table = "data-ec2-subnet-az-2a-rt"
      nacl_rule   = "data-ec2"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.168.64/26"
      name        = "data-ec2-az-2b-subnet-01"
      route_table = "data-ec2-subnet-az-2b-rt"
      nacl_rule   = "data-ec2"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.168.128/26"
      name        = "data-ec2-az-2c-subnet-01"
      route_table = "data-ec2-subnet-az-2c-rt"
      nacl_rule   = "data-ec2"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.168.192/26"
      name        = "data-ec2-az-2d-subnet-01"
      route_table = "data-ec2-subnet-az-2d-rt"
      nacl_rule   = "data-ec2"
    },
    # 4 CIDR blocks reserved (10.x.169.0 - 10.x.169.254)
    # tgw (10.x.170.0/28 - 10.x.170.64/28)
    # https://docs.aws.amazon.com/vpc/latest/tgw/tgw-best-design-practices.html?ssp=1&darkschemeovr=1
    {
      az          = "us-west-2a"
      cidr_block  = "10.150.170.0/28"
      name        = "private-tgw-az-2a-subnet-01"
      route_table = "private-tgw-subnet-az-2a-rt"
    },
    {
      az          = "us-west-2b"
      cidr_block  = "10.150.170.16/28"
      name        = "private-tgw-az-2b-subnet-01"
      route_table = "private-tgw-subnet-az-2b-rt"
    },
    {
      az          = "us-west-2c"
      cidr_block  = "10.150.170.32/28"
      name        = "private-tgw-az-2c-subnet-01"
      route_table = "private-tgw-subnet-az-2c-rt"
    },
    {
      az          = "us-west-2d"
      cidr_block  = "10.150.170.48/28"
      name        = "private-tgw-az-2d-subnet-01"
      route_table = "private-tgw-subnet-az-2d-rt"
    },
    # 4 CIDR blocks reserved (10.x.170.64 - 10.x.170.127)
    # data* 4 CIDR blocks reserved (10.x.172.0 - 10.x.179.255)
    # 4 CIDR blocks reserved (10.x.180.0 - 10.x.180.255)
  ]

  network_acls = [
    {
      name = "private-ecs"
      egress_rules = [
        { # Allow to call HTTPS to ECS for Internet services like Google, Raygun, etc. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow to use HTTP for AWS Network Operations. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 20
          from_port  = 80
          to_port    = 80
        },
        { # Allow ECS to call Redis databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 30
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow ECS to call SEQ.
          action     = "allow"
          cidr_block = "10.152.40.0/23"
          protocol   = "6"
          rule_no    = 40
          from_port  = 5341
          to_port    = 5341
        },
        { # Allow to call Secure SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 50
          from_port  = 587
          to_port    = 587
        },
        { # Allow to call SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 60
          from_port  = 25
          to_port    = 25
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics Subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 80
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for platform-prod subnets in az-a/b
          action     = "allow"
          cidr_block = "172.31.14.0/23" # 14.0, 15.0
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 130
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 150
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call MS SQL server. (genetics-sync UDS)
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 160
          from_port  = 1433
          to_port    = 1433
        },
        { # Allow ECS to call RDS MySQL databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 170
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow ECS to call RDS Postgres databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 180
          from_port  = 5432
          to_port    = 5432
        },
        { # Allow to call ephemeral ports to the VPC. (ALB/Lambda/ECS).
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow internal traffic to HTTP port from public ALBs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow internal traffic to HTTP port from public ALBs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 20
          from_port  = 5000
          to_port    = 5000
        },
        { # Allow to call ephemeral ports to the VPC. (ALB/Lambda/ECS).
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 32768
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-dms"
      egress_rules = [
        { # Allow https ports for S3 buckets.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Access for database in pulse-prod subnets.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 20
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics Subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 80
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for platform-prod subnets in az-a/b
          action     = "allow"
          cidr_block = "172.31.14.0/23"
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 130
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 150
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Ephemeral Ports to Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 160
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { #  Access from database in pulse-prod subnets.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Ephemeral Ports from Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 20
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Internet for AWS Services.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-database"
      egress_rules = [
        { # Allow ephemeral ports for ECS subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        },
        { # Allow ephemeral ports for EB subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 32768
          to_port    = 65535
        },
        { # Allow ephemeral ports for EC2 subnets. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2a (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.48.0/20"
          protocol   = "6"
          rule_no    = 1030
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2b. (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.64.0/20"
          protocol   = "6"
          rule_no    = 1040
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2c. (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.80.0/20"
          protocol   = "6"
          rule_no    = 1050
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for lambda subnet az-2d. (Rule: Lambda can use DB)
          action     = "allow"
          cidr_block = "10.150.96.0/20"
          protocol   = "6"
          rule_no    = 1060
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports for dms.
          action     = "allow"
          cidr_block = "10.150.36.0/24"
          protocol   = "6"
          rule_no    = 1070
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow ECS networks to access redis.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 10
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow EB networks to access redis.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 20
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow EC2 to call Redis databases. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 30
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow VPN EC2 subnet to call MongoDB databases. (Rule: VPN can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 40
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet 2a to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.48.0/20"
          protocol   = "6"
          rule_no    = 50
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet 2b to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.64.0/20"
          protocol   = "6"
          rule_no    = 60
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet 2c to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.80.0/20"
          protocol   = "6"
          rule_no    = 70
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda subnet to call MongoDB databases. (Rule: Lambda can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.96.0/20"
          protocol   = "6"
          rule_no    = 80
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow ECS networks to access MySQL.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow VPN EC2 subnet to call MySQL databases. (Rule: VPN can use MySQL)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow dms subnet to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.36.0/25"
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2a to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.48.0/20"
          protocol   = "6"
          rule_no    = 120
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2b to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.64.0/20"
          protocol   = "6"
          rule_no    = 130
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2c to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.80.0/20"
          protocol   = "6"
          rule_no    = 140
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow Lambda subnet 2d to call MySQL databases.
          action     = "allow"
          cidr_block = "10.150.96.0/20"
          protocol   = "6"
          rule_no    = 150
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow ECS networks to access SQL server.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 160
          from_port  = 1433
          to_port    = 1433
        },
        { # Allow VPN EC2 subnet to call SQL databases. (Rule: VPN can use SQL)
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 170
          from_port  = 1433
          to_port    = 1433
        }
      ]
    },
    {
      name = "private-ec2"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations. (We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow HTTP from EC2 Subnets for AWS Network Operations and VPN. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 20
          from_port  = 80
          to_port    = 80
        },
        { # Allow NTP ports to Internet for AWS Network Operations. (We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 30
          from_port  = 123
          to_port    = 123
        },
        { # Allow VPN EC2 to call Redis databases. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 40
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow VPN EC2 to call Mongo databases. (Rule: VPN can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 50
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow VPN EC2 to call RDS MySQL databases. (Rule: VPN can use RDS)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 60
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow VPN EC2 to call RDS Postgres databases. (Rule: VPN can use RDS)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 70
          from_port  = 5432
          to_port    = 5432
        },
        { # Allow ephemeral from EC2 Subnets for VPN.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        },
        { # Allow Ephemeral Ports to Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024
          to_port    = 65535
        },
        { #  Allow VPN EC2 to call RDS SQL databases. (Rule: VPN can use RDS)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 1433
          to_port    = 1433
        }
      ]
      ingress_rules = [
        { # Allow HTTP from EC2 Subnets for SEQ instance.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow RDP from EC2 Subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/22"
          protocol   = "6"
          rule_no    = 11
          from_port  = 3389
          to_port    = 3389
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from database subnets. (Rule: VPN can use redis)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow Ephemeral Ports from Service Subnets
          action     = "allow"
          cidr_block = "10.150.154.0/24"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 1024
          to_port    = 65535
        }
      ]
    },
    {
      name = "elastic-beanstalk"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow NTP ports to Internet for AWS Network Operations. (EB deployment requires)
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 20
          from_port  = 123
          to_port    = 123
        },
        {
          # Allow EB to call Redis databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 30
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow to call database ports in 2215 for platform-prod-aurora subnets in az-a/b.
          action     = "allow"
          cidr_block = "172.31.14.0/23" # 14.0, 15.0
          protocol   = "6"
          rule_no    = 40
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow EB to call SEQ.
          action     = "allow"
          cidr_block = "10.152.40.0/23"
          protocol   = "6"
          rule_no    = 50
          from_port  = 5341
          to_port    = 5341
        },
        { # Allow to access ephemeral ports to private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to public-albs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 1001
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow incoming HTTP ports from private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP ports from public-albs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 11
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP ports from private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 20
          from_port  = 5000
          to_port    = 5000
        },
        { # Allow incoming HTTPS ports from private-albs.
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 30
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPS ports from public-albs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 31
          from_port  = 443
          to_port    = 443
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations. (Ports based on Linux atm).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 32768
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-service"
      egress_rules = [
        { # Allow ephemeral ports to EC2.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to ECS.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 20
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to Lambda.
          action     = "allow"
          cidr_block = "10.150.0.0/17"
          protocol   = "6"
          rule_no    = 30
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 60
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports to VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 1024
          to_port    = 65535
        },
      ]
      ingress_rules = [
        { # Allow ephemeral ports from EC2.
          action     = "allow"
          cidr_block = "10.150.40.0/22"
          protocol   = "6"
          rule_no    = 10
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from ECS.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 20
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Lambda.
          action     = "allow"
          cidr_block = "10.150.0.0/17"
          protocol   = "6"
          rule_no    = 30
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 60
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 1024
          to_port    = 65535
        },
      ]
    },
    {
      name = "private-alb"
      egress_rules = [
        { # Allow HTTP traffic to elastic-beanstalk subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow HTTP traffic to elastic-beanstalk subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 20
          from_port  = 5000
          to_port    = 5000
        },
        { # Allow HTTPs traffic to elastic-beanstalk subnets.
          action     = "allow"
          cidr_block = "10.150.144.0/23"
          protocol   = "6"
          rule_no    = 30
          from_port  = 443
          to_port    = 443
        },
        { # Allow internal HTTPs traffic to public ALBs.
          action     = "allow"
          cidr_block = "10.150.160.0/22"
          protocol   = "6"
          rule_no    = 40
          from_port  = 443
          to_port    = 443
        },
        { # Allow internal HTTPs traffic to ECS subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/20"
          protocol   = "6"
          rule_no    = 50
          from_port  = 443
          to_port    = 443
        },
        { # Allow to access ephemeral ports to the VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 1001
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 1002
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 1003
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow to access ephemeral ports to the VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 1004
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow incoming HTTP traffic from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 10
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTPs traffic from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 20
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming ephemeral ports from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 11
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 12
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 13
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTP traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 14
          from_port  = 80
          to_port    = 80
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 21
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 22
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 23
          from_port  = 443
          to_port    = 443
        },
        { # Allow incoming HTTPs traffic from VPC-integrations-prod Lambdas.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 24
          from_port  = 443
          to_port    = 443
        }
      ]
    },
    {
      name = "allow-everything"
      egress_rules = [
        { # NTP for EB deployments.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 1010
          from_port  = 123
          to_port    = 123
        },
        {
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 0
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # NTP for EB deployments.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "17"
          rule_no    = 1010
          from_port  = 123
          to_port    = 123
        },
        {
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1020
          from_port  = 0
          to_port    = 65535
        }
      ]
    },
    {
      name          = "default-deny"
      egress_rules  = []
      ingress_rules = []
    },
    {
      name = "data-ec2"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations. (We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow HTTP from EC2 Subnets for AWS Network Operations and VPN. ((We should use prefix lists in security group).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 20
          from_port  = 80
          to_port    = 80
        },
        { # Allow to call database ports in 2215 for platform-prod-aurora subnets in az-a/b.
          action     = "allow"
          cidr_block = "172.31.14.0/23" # 14.0, 15.0
          protocol   = "6"
          rule_no    = 30
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 60
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 70
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 130
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 150
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow ephemeral to EC2 Subnets.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow ephemeral ports from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow ephemeral ports from Internet for AWS Network Operations. (Ports based on Linux atm).
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024 # windows 1024-65535, linux 32768-65535
          to_port    = 65535
        }
      ]
    },
    {
      name = "private-lambda"
      egress_rules = [
        { # Allow HTTPS ports to Internet for AWS Network Operations.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 10
          from_port  = 443
          to_port    = 443
        },
        { # Allow HTTP ports to private albs (JR).
          action     = "allow"
          cidr_block = "10.150.155.0/24"
          protocol   = "6"
          rule_no    = 11
          from_port  = 80
          to_port    = 80
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 20
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 30
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 40
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call database ports in 2215 for document-db subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 50
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow Lambda to call Redis databases.
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 60
          from_port  = 6379
          to_port    = 6380
        },
        { # Allow Lambda to call Secure SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 70
          from_port  = 587
          to_port    = 587
        },
        { # Allow Lambda to call SMTP.
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 80
          from_port  = 25
          to_port    = 25
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-a.
          action     = "allow"
          cidr_block = "10.30.2.0/24"
          protocol   = "6"
          rule_no    = 90
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics Subnets in az-b.
          action     = "allow"
          cidr_block = "10.30.4.0/24"
          protocol   = "6"
          rule_no    = 100
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-c.
          action     = "allow"
          cidr_block = "10.30.6.0/24"
          protocol   = "6"
          rule_no    = 110
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for pulse-genetics subnets in az-d.
          action     = "allow"
          cidr_block = "10.30.8.0/24"
          protocol   = "6"
          rule_no    = 120
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow to call database ports in 2215 for platform-prod subnets in az-a/b
          action     = "allow"
          cidr_block = "172.31.14.0/23"
          protocol   = "6"
          rule_no    = 130
          from_port  = 3306
          to_port    = 3306
        },
        { # Allow lambda to call Mongo databases. (Rule: VPN can use MongoDB)
          action     = "allow"
          cidr_block = "10.150.32.0/22"
          protocol   = "6"
          rule_no    = 140
          from_port  = 27017
          to_port    = 27017
        },
        { # Allow to call ephemeral ports to the VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        }
      ]
      ingress_rules = [
        { # Allow ephemeral ports from VPC.
          action     = "allow"
          cidr_block = "10.150.0.0/16"
          protocol   = "6"
          rule_no    = 1000
          from_port  = 1024
          to_port    = 65535
        },
        { # Allow incoming ephemeral ports from Internet for secrets manager etc..
          # TODO: Replace secrets manager with VPC endpoint!!
          action     = "allow"
          cidr_block = "0.0.0.0/0"
          protocol   = "6"
          rule_no    = 1010
          from_port  = 1024 # windows 1024-65535, linux 32768-65535
          to_port    = 65535
        },
      ]
    }
  ],
  flow_logs_kms_key_alias = "flow-logs"
}
