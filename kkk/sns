# List rules that have ECS targets
for r in $(aws events list-rules --region us-west-2 --query 'Rules[].Name' --output text); do
  if aws events list-targets-by-rule --region us-west-2 --rule "$r" \
       --query 'Targets[?EcsParameters!=null]' --output text | grep -qi .; then
    echo "== $r ==";
    aws events list-targets-by-rule --region us-west-2 --rule "$r" --output json \
      | grep -Eio '"taskDefinitionArn"[^"]*"[^"]+' | sed 's/.*"//'
  fi
done

# Quick genetics sweeps
aws events list-rules --region us-west-2 --output json | grep -i genetics || true
aws scheduler list-schedules --region us-west-2 --query 'Schedules[].Name' --output text \
  | tr '\t' '\n' | grep -i genetics || true

















Good Morning @Carlos Rodríguez
I am working on DevOps Sprint 66 - DevOps Scrum Board - Scrum Board - VAS JIRA and made the code changes to remove the databases-storage-alert-rule from sandbox. To validate, I ran terraform apply locally (with auto-approval disabled).
The plan correctly showed the databases-storage-alert-rule and its target scheduled for destroy, but it also flagged two additional rules (dms-task-failure-rule and elasticbeanstalk-notification-rule) for removal, plus one SNS target addition. I cancelled the apply at the prompt so no changes were made.
Can you confirm if those extra rules are expected to be removed, or if we need to re-add them back to the tfvars?
this is the PR regarding those changes
[DEVOPS-3503] removed the EventBridge rule as part of DEVOPS-3503 by Salma-Sheref-VAS · Pull Request #1430 · vas-dev/vas-devops-pulse (edited) 
8:18
Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create
  - destroy
Terraform will perform the following actions:
  # module.eventbridge_oregon.aws_cloudwatch_event_rule.this["databases-storage-alert-rule"] will be destroyed
  # (because key ["databases-storage-alert-rule"] is not in for_each map)
  - resource "aws_cloudwatch_event_rule" "this" {
      - arn            = "arn:aws:events:us-west-2:792827266856:rule/databases-storage-alert-rule" -> null
      - description    = "General event" -> null
      - event_bus_name = "default" -> null
      - event_pattern  = jsonencode(
            {
              - detail      = {
                  - EventID   = [
                      - "RDS-EVENT-0089",
                      - "RDS-EVENT-0007",
                      - "RDS-EVENT-0227",
                      - "RDS-EVENT-0222",
                    ]
                  - SourceArn = [
                      - "arn:aws:rds:us-west-2:792827266856:db:crud-users-db",
                      - "arn:aws:rds:us-west-2:792827266856:db:agsource-alta-gps",
                      - "arn:aws:rds:us-west-2:792827266856:cluster:datascience-platform-aurora-cluster",
                      - "arn:aws:rds:us-west-2:792827266856:cluster:platform-prod-aurora",
                      - "arn:aws:rds:us-west-2:792827266856:db:vas-db-genetics",
                    ]
                }
              - detail-type = [
                  - "RDS DB Instance Event",
                ]
              - source      = [
                  - "aws.rds",
                ]
            }
        ) -> null
      - id             = "databases-storage-alert-rule" -> null
      - is_enabled     = true -> null
      - name           = "databases-storage-alert-rule" -> null
      - tags           = {
          - "Name" = "databases-storage-alert-rule"
        } -> null
      - tags_all       = {
          - "Name"         = "databases-storage-alert-rule"
          - "application"  = "terraform"
          - "costcenter"   = "vas"
          - "env"          = "sandbox"
          - "managedby"    = "terraform"
          - "map-migrated" = "migED85X1S2OJ"
          - "owner"        = "VasDevOpsteam@vas.com"
          - "product"      = "pulse"
          - "project"      = "devops"
        } -> null
    }
  # module.eventbridge_oregon.aws_cloudwatch_event_rule.this["dms-task-failure-rule"] will be destroyed
  # (because key ["dms-task-failure-rule"] is not in for_each map)
  - resource "aws_cloudwatch_event_rule" "this" {
      - arn            = "arn:aws:events:us-west-2:792827266856:rule/dms-task-failure-rule" -> null
      - description    = "General event" -> null
      - event_bus_name = "default" -> null
      - event_pattern  = jsonencode(
            {
              - detail      = {
                  - ReplicationTaskStatus = [
                      - "failed",
                    ]
                }
              - detail-type = [
                  - "DMS Replication Task State Change",
                ]
              - source      = [
                  - "aws.dms",
                ]
            }
        ) -> null
      - id             = "dms-task-failure-rule" -> null
      - is_enabled     = true -> null
      - name           = "dms-task-failure-rule" -> null
      - tags           = {} -> null
      - tags_all       = {} -> null
    }
  # module.eventbridge_oregon.aws_cloudwatch_event_rule.this["elasticbeanstalk-notification-rule"] will be destroyed
  # (because key ["elasticbeanstalk-notification-rule"] is not in for_each map)
  - resource "aws_cloudwatch_event_rule" "this" {
      - arn            = "arn:aws:events:us-west-2:792827266856:rule/elasticbeanstalk-notification-rule" -> null
      - description    = "General event" -> null
      - event_bus_name = "default" -> null
      - event_pattern  = jsonencode(
            {
              - detail      = {
                  - Severity = [
                      - "Severe",
                      - "Degraded",
                    ]
                }
              - detail-type = [
                  - "Health status change",
                ]
              - source      = [
                  - "aws.elasticbeanstalk",
                ]
            }
        ) -> null
      - id             = "elasticbeanstalk-notification-rule" -> null
      - is_enabled     = true -> null
      - name           = "elasticbeanstalk-notification-rule" -> null
      - tags           = {
          - "Name" = "elasticbeanstalk-notification-rule"
        } -> null
      - tags_all       = {
          - "Name"         = "elasticbeanstalk-notification-rule"
          - "application"  = "terraform"
          - "costcenter"   = "vas"
          - "env"          = "sandbox"
          - "managedby"    = "terraform"
          - "map-migrated" = "migED85X1S2OJ"
          - "owner"        = "VasDevOpsteam@vas.com"
          - "product"      = "pulse"
          - "project"      = "devops"
        } -> null
    }
  # module.eventbridge_oregon.aws_cloudwatch_event_target.this["databases-storage-alert-rule-target-0"] will be destroyed
  # (because key ["databases-storage-alert-rule-target-0"] is not in for_each map)
  - resource "aws_cloudwatch_event_target" "this" {
      - arn            = "arn:aws:sns:us-west-2:792827266856:vas-devops-events" -> null
      - event_bus_name = "default" -> null
      - id             = "databases-storage-alert-rule-terraform-20250513213219216100000001" -> null
      - rule           = "databases-storage-alert-rule" -> null
      - target_id      = "terraform-20250513213219216100000001" -> null
    }
  # module.eventbridge_oregon.aws_cloudwatch_event_target.this["security-hub-notification-rule-critical-target-0"] will be created
  + resource "aws_cloudwatch_event_target" "this" {
      + arn            = "arn:aws:sns:us-west-2:792827266856:sns-alerts-critical"
      + event_bus_name = "default"
      + id             = (known after apply)
      + rule           = "security-hub-notification-rule-critical"
      + target_id      = (known after apply)
    }
Plan: 1 to add, 0 to change, 4 to destroy.
Warnings:
- Value for undeclared variable
To see the full warning notes, run Terraform without -compact-warnings.
Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.
  Enter a value: no
Apply cancelled.
Releasing state lock. This may take a few moments...


Carlos Rodríguez
  10:00 PM
Hi Salma, is this plan for sandbox?
10:00
If it's for Sandbox don't worry too much about it, just apply whatever it's on main


salma sheref
  10:00 PM
Yes.


Carlos Rodríguez
  10:00 PM
Just check how's the plan for staging and prod


salma sheref
  10:01 PM
I think we do not need to do for staging and prod (edited) 


Carlos Rodríguez
  10:04 PM
Why does your PR does not match with the title of the task?
10:04
what's your PR has to do with genetics sync?
10:04
I think the task lack of good description as well


salma sheref
  10:05 PM
yes the task don't have enough description


Carlos Rodríguez
  10:07 PM
And removing databases-storage-alert-rule doesn't seem to be related with the title: Decommission genetics-sync-fargate-task EB Rule
10:07
Now why would genetics-sync rule would want to be removed?
10:07
I mean it could be removed from a specific environment
10:08
from morpheus or from sandbox


salma sheref
  10:11 PM
so the genetics database is already decommission form sand box environment
10:11
that's why I remove form sandbox environment
New


Carlos Rodríguez
  10:12 PM
but you are removing not only for genetics
10:12
image.png
 
image.png


10:12
you are removing for all those databases
10:13
anyway, your PR does not match what you were asked to do in the task


salma sheref
  10:14 PM
ok let me check with sheela to add more information

















terraform -chdir="src/terraform/pulse/security/policies/messaging/sns" plan \
  -var-file=management.tfvars \
  -var="environment=sandbox" \
  -target='aws_sns_topic_policy.this["arn:aws:sns:us-west-2:221515991534:vas-platform-integrations"]'


Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3414-Refactor-SNS)
$ terraform -chdir="src/terraform/pulse/security/policies/messaging/sns" init --backend-config="${PWD}/src/terraform/pulse/env-sandbox/sandbox.conf"

Initializing the backend...

Successfully configured the backend "s3"! Terraform will automatically
use this backend unless the backend configuration changes.

Initializing provider plugins...
- Finding hashicorp/aws versions matching "~> 4.0"...
- Installing hashicorp/aws v4.67.0...
- Installed hashicorp/aws v4.67.0 (signed by HashiCorp)

Terraform has created a lock file .terraform.lock.hcl to record the provider
selections it made above. Include this file in your version control repository
so that Terraform can guarantee to make the same selections by default when
you run "terraform init" in the future.

Terraform has been successfully initialized!

You may now begin working with Terraform. Try running "terraform plan" to see
any changes that are required for your infrastructure. All Terraform commands
should now work.

If you ever set or change modules or backend configuration for Terraform,
rerun this command to reinitialize your working directory. If you forget, other
commands will detect it and remind you to do so if necessary.

Salma Sheref@SalmaSheref MINGW64 ~/Documents/GIT/vas-devops-pulse (DEVOPS-3414-Refactor-SNS)
$


resource "aws_sns_topic_policy" "this" {
  for_each = { for policy in var.topic_policies : policy.topic_arn => policy }

  arn    = each.key
  policy = file("${path.module}/${each.value.policy}")
}


PS C:\Users\Salma Sheref\Documents\GIT\vas-devops-pulse\src\terraform\pulse\security\policies\messaging\sns> tree /f
Folder PATH listing for volume Windows-SSD
Volume serial number is 8AD3-73D0
C:.
│   config.tf
│   main.tf
│   management.tfvars
│   morpheus.tfvars
│   variables.tf
│   
└───json
        vas-platform-integrations.json

PS C:\Users\Salma Sheref\Documents\GIT\vas-devops-pulse\src\terraform\pulse\security\policies\messaging\sns>



main.tf
resource "aws_sns_topic_policy" "this" {
  for_each = { for policy in var.topic_policies : policy.topic_arn => policy }
  arn      = each.key
  policy = jsonencode({
    Version = each.value.policy.Version
    Statement = [
      for statement in each.value.policy.Statement : merge({
        Sid       = statement.Sid
        Effect    = statement.Effect
        Principal = statement.Principal
        Action    = statement.Action
        Resource  = statement.Resource
        },
        statement.Condition != null ? {
          Condition = statement.Condition
      } : {})
    ]
  })
}




variable "topic_policies" {
  type = list(object({
    topic_arn = string
    policy    = string
  }))
}


variable "topic_policies" {
  type = list(object({
    topic_arn = string
    policy = object({
      Version = string
      Statement = list(object({
        Sid       = string
        Effect    = string
        Principal = map(list(string))
        Action    = list(string)
        Resource  = string
        Condition = optional(map(map(string)), null)
      }))
    })
  }))
}

variable "general_variables" {
  description = "Custom project configs"
  type = object({
    main_region  = string
    default_tags = map(string)
  })
}

variable "pulse_project_configs" {
  description = "Custom project configs"
  type = object({
    default_tags = map(string)
  })
}




policy_path = "json/vas-platform-integrations.json"

vas-platform-integrations.json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "default-statement-ID",
      "Effect": "Allow",
      "Principal": { "Service": ["lambda.amazonaws.com"] },
      "Action": ["SNS:Publish"],
      "Resource": "arn:aws:sns:us-west-2:221515991534:vas-platform-integrations",
      "Condition": {
        "ArnLike": {
          "aws:SourceArn": "arn:aws:lambda:us-west-2:221515991534:*"
        }
      }
    },
    {
      "Sid": "CrossAccountECSStatement",
      "Effect": "Allow",
      "Principal": {
        "AWS": ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
      },
      "Action": ["SNS:Publish"],
      "Resource": "arn:aws:sns:us-west-2:221515991534:vas-platform-integrations"
    },
    {
      "Sid": "CrossAccountSubscribe",
      "Effect": "Allow",
      "Principal": {
        "AWS": ["arn:aws:iam::279137250720:role/pulse-sls-deployment-role"]
      },
      "Action": ["SNS:Subscribe"],
      "Resource": "arn:aws:sns:us-west-2:221515991534:vas-platform-integrations"
    },
    {
      "Sid": "JRCrossAccountAccess",
      "Effect": "Allow",
      "Principal": {
        "AWS": [
          "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
          "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role"
        ]
      },
      "Action": ["SNS:Publish"],
      "Resource": "arn:aws:sns:us-west-2:221515991534:vas-platform-integrations"
    }
  ]
}





managment.tfvars

topic_policies = [
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-platform-integrations"
    policy = {
      Version = "2012-10-17"
      Statement = [
        {
          Sid    = "default-statement-ID",
          Effect = "Allow",
          Principal = {
            Service = ["lambda.amazonaws.com"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-integrations",
          Condition = {
            ArnLike = {
              "aws:SourceArn" = "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          Sid    = "CrossAccountECSStatement",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-integrations"
        },
        {
          Sid    = "CrossAccountSubscribe",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/pulse-sls-deployment-role"]
          },
          Action   = ["SNS:Subscribe"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-integrations"
        },
        {
          Sid    = "JRCrossAccountAccess",
          Effect = "Allow",
          Principal = {
            AWS = [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role"
            ]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-integrations"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-platform-notifications"
    policy = {
      Version = "2012-10-17"
      Statement = [
        {
          Sid    = "default-statement-ID",
          Effect = "Allow",
          Principal = {
            Service = ["lambda.amazonaws.com"]
          },
          Action   = ["SNS:Subscribe"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-notifications",
          Condition = {
            ArnLike = {
              "aws:SourceArn" = "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          Sid    = "CrossAccountECSStatement",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-notifications"
        },
        {
          Sid    = "JRCrossAccountAccess",
          Effect = "Allow",
          Principal = {
            AWS = [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role"
            ]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-notifications"
        },
        {
          Sid    = "SLSCrossAccountAccess",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/serverless-devops-role-prod"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-notifications"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-ops-dairies"
    policy = {
      Version = "2012-10-17"
      Statement = [
        {
          Sid    = "default-statement-ID",
          Effect = "Allow",
          Principal = {
            Service = ["lambda.amazonaws.com"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-ops-dairies",
          Condition = {
            ArnLike = {
              "aws:SourceArn" = "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          Sid    = "CrossAccountECSStatement",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-ops-dairies"
        },
        {
          "Sid"    = "CrossAccountJRStatement",
          "Effect" = "Allow",
          "Principal" = {
            "AWS" = [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role"
            ]
          },
          "Action"   = ["SNS:Publish"],
          "Resource" = "arn:aws:sns:us-west-2:221515991534:vas-ops-dairies"
        },
        {
          "Sid"    = "CrossAccountCPStatement",
          "Effect" = "Allow",
          "Principal" = {
            "AWS" = [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-carepackages-instance-role"
            ]
          },
          "Action"   = ["SNS:Subscribe"],
          "Resource" = "arn:aws:sns:us-west-2:221515991534:vas-ops-dairies"
        },
        {
          Sid    = "CrossAccountSubscribe",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/pulse-sls-deployment-role"]
          },
          Action   = ["SNS:Subscribe"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-ops-dairies"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-pulse-care-packages"
    policy = {
      Version = "2012-10-17"
      Statement = [
        {
          Sid    = "default-statement-ID",
          Effect = "Allow",
          Principal = {
            Service = ["lambda.amazonaws.com"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-pulse-care-packages",
          Condition = {
            ArnLike = {
              "aws:SourceArn" = "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          Sid    = "CrossAccountECSStatement",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-pulse-care-packages"
        },
        {
          Sid    = "JRCrossAccountAccess",
          Effect = "Allow",
          Principal = {
            AWS = [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-carepackages-instance-role"
            ]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-pulse-care-packages"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-platform-items"
    policy = {
      Version = "2012-10-17"
      Statement = [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-platform-items",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          Sid    = "CrossAccountECSStatement",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-items"
        },
        {
          Sid    = "JRCrossAccountAccess",
          Effect = "Allow",
          Principal = {
            AWS = [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-carepackages-instance-role"
            ]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-items"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-ops-zones"
    policy = {
      Version = "2012-10-17"
      Statement = [
        {
          Sid    = "default-statement-ID",
          Effect = "Allow",
          Principal = {
            Service = ["lambda.amazonaws.com"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-ops-zones",
          Condition = {
            ArnLike = {
              "aws:SourceArn" = "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          Sid    = "CrossAccountECSStatement",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-ops-zones"
        },
        {
          Sid    = "JRCrossAccountAccess",
          Effect = "Allow",
          Principal = {
            AWS = [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role"
            ]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-ops-zones"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-herd-pens"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-herd-pens",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "CrossAccountECSStatements",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-herd-pens"
        },
        {
          "Sid" : "JRCrossAccountAccess",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role"
            ]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-herd-pens"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-platform-feed"
    policy = {
      Version = "2012-10-17"
      Statement = [
        {
          Sid    = "__default_statement_ID",
          Effect = "Allow",
          Principal = {
            AWS = ["*"]
          },
          Action = [
            "SNS:GetTopicAttributes",
            "SNS:SetTopicAttributes",
            "SNS:AddPermission",
            "SNS:RemovePermission",
            "SNS:DeleteTopic",
            "SNS:Subscribe",
            "SNS:ListSubscriptionsByTopic",
            "SNS:Publish",
            "SNS:Receive"
          ],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-feed",
          Condition = {
            StringEquals = {
              "AWS:SourceOwner" = "221515991534"
            }
          }
        },
        {
          Sid    = "CrossAccountECSStatement",
          Effect = "Allow",
          Principal = {
            AWS = ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
          },
          Action   = ["SNS:Publish"],
          Resource = "arn:aws:sns:us-west-2:221515991534:vas-platform-feed"
        },
        {
          "Sid" : "JRCrossAccountAccess",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role"
            ]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-platform-feed"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-ops-vendor-integrations",
    policy = {

      "Version" : "2012-10-17",
      "Id" : "vas-ops-vendor-integrations-topic",
      "Statement" : [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-ops-vendor-integrations",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "CrossAccountServerlessSubscribe",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::279137250720:role/pulse-sls-deployment-role"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-ops-vendor-integrations"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-parlors-milkings"
    policy = {
      Version = "2012-10-17"
      Statement = [
        {
          "Sid" : "lambda-publish-parlors",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-parlors-milkings",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "sls-subscribe-pulse-prod",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::279137250720:role/pulse-sls-deployment-role"]
          },
          "Action" : ["SNS:Subscribe"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-parlors-milkings"
        },
        {
          "Sid" : "sls-publish-pulse-prod",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::279137250720:role/sls-lambda-aggregators-role"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-parlors-milkings"
        },
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-platform-kpis"
    policy = {
      Version = "2012-10-17",
      Statement = [
        {
          "Sid" : "__default_statement_ID",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["*"]
          },
          "Action" : [
            "SNS:GetTopicAttributes",
            "SNS:SetTopicAttributes",
            "SNS:AddPermission",
            "SNS:RemovePermission",
            "SNS:DeleteTopic",
            "SNS:Subscribe",
            "SNS:ListSubscriptionsByTopic",
            "SNS:Publish",
            "SNS:Receive"
          ],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-platform-kpis",
          "Condition" : {
            "StringEquals" : {
              "AWS:SourceOwner" : "221515991534"
            }
          }
        },
        {
          "Sid" : "CrossAccountECSStatement",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::279137250720:role/pulse-cluster-task-execution-role"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-platform-kpis"
        },
        {
          "Sid" : "JRCrossAccountAccess",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role"
            ]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-platform-kpis"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-ops-companies"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "JobsrunnerCrossAccountAccess",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : [
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-instance-role",
              "arn:aws:iam::279137250720:role/pulse-elastic-beanstalk-jobsrunner-instance-role"
            ]
          },
          "Action" : ["sns:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-ops-companies"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-parlors"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-parlors",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "CrossAccountECSStatement",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::512438066734:role/pulse-cluster-task-execution-role"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-parlors"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-parlors-milk-parlors"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-parlors-milk-parlors",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "CrossAccountECSStatement",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::512438066734:role/pulse-cluster-task-execution-role"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-parlors-milk-parlors"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-ops-zone-integrations",
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-ops-zone-integrations",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-ops-dairy-vendor-integrations"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "__default_statement_ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-ops-dairy-vendor-integrations",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "AllowPublishThroughSSLOnly",
          "Effect" : "Deny",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-ops-dairy-vendor-integrations",
          "Condition" : {
            "Bool" : {
              "aws:SecureTransport" : "false"
            }
          }
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-ops-outgoing-integrations"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-ops-outgoing-integrations",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-worklists"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-worklists",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-auth-users"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-auth-users",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-genetics-matings"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "__default_statement_ID",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["*"]
          },
          "Action" : [
            "SNS:GetTopicAttributes",
            "SNS:SetTopicAttributes",
            "SNS:AddPermission",
            "SNS:RemovePermission",
            "SNS:DeleteTopic",
            "SNS:Subscribe",
            "SNS:ListSubscriptionsByTopic",
            "SNS:Publish",
            "SNS:Receive"
          ],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-genetics-matings",
          "Condition" : {
            "StringEquals" : {
              "AWS:SourceOwner" : "221515991534"
            }
          }
        },
        {
          "Sid" : "CrossAccountECSStatement",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::512438066734:role/pulse-cluster-task-execution-role"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-genetics-matings"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-herd-daily-milkings"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "CrossAccountECSStatement",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : [
              "arn:aws:iam::279137250720:role/pulse-herd-task-role",
              "arn:aws:iam::279137250720:role/pulse-monolith-task-role"
            ]
          },
          "Action" : ["sns:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-herd-daily-milkings"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-herd-item-changes"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "publish-cross-account",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::279137250720:role/integrations-attentions-lambdaRole-prod"]
          },
          "Action" : ["sns:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-herd-item-changes"
        },
        {
          "Sid" : "subscribe-cross-account",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::279137250720:role/pulse-sls-deployment-role"]
          },
          "Action" : ["sns:Subscribe"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-herd-item-changes"
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-ops-addresses"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "__default_statement_ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-ops-addresses",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "AllowPublishThroughSSLOnly",
          "Effect" : "Deny",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-ops-addresses",
          "Condition" : {
            "Bool" : {
              "aws:SecureTransport" : "false"
            }
          }
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-platform-genetics"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "__default_statement_ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-platform-genetics",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "AllowPublishThroughSSLOnly",
          "Effect" : "Deny",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-platform-genetics",
          "Condition" : {
            "Bool" : {
              "aws:SecureTransport" : "false"
            }
          }
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:vas-herd-cowevents"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "__default_statement_ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-herd-cowevents",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "AllowPublishThroughSSLOnly",
          "Effect" : "Deny",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:vas-herd-cowevents",
          "Condition" : {
            "Bool" : {
              "aws:SecureTransport" : "false"
            }
          }
        }
      ]
    }
  },
  {
    topic_arn = "arn:aws:sns:us-west-2:221515991534:integrations-parlors-dailymilkings"
    policy = {
      "Version" : "2012-10-17",
      "Statement" : [
        {
          "Sid" : "default-statement-ID",
          "Effect" : "Allow",
          "Principal" : {
            "Service" : ["lambda.amazonaws.com"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:integrations-parlors-dailymilkings",
          "Condition" : {
            "ArnLike" : {
              "aws:SourceArn" : "arn:aws:lambda:us-west-2:221515991534:*"
            }
          }
        },
        {
          "Sid" : "CrossAccountECSStatement",
          "Effect" : "Allow",
          "Principal" : {
            "AWS" : ["arn:aws:iam::512438066734:role/pulse-cluster-task-execution-role"]
          },
          "Action" : ["SNS:Publish"],
          "Resource" : "arn:aws:sns:us-west-2:221515991534:integrations-parlors-dailymilkings"
        }
      ]
    }
  }
]
























roles.tf

# Create the roles
resource "aws_iam_role" "role" {
  for_each = { for role in var.roles : role.role_name => role }

  name                  = each.key
  description           = try(each.value.description, "Managed by terraform")
  permissions_boundary  = try(each.value.permissions_boundary, null)
  max_session_duration  = try(each.value.role_max_session_duration, 3600)
  force_detach_policies = try(each.value.role_force_detach_policies, false)

  # Add here only variables for assume policies.
  assume_role_policy = templatefile(each.value.assume_policy, merge(each.value.policies_vars,
    {
      # Only define variables with defaults if missing from policies_vars.
      region                = coalesce(each.value.policies_vars.region, data.aws_region.current.name)
      account_id            = coalesce(each.value.policies_vars.account_id, data.aws_caller_identity.current.account_id)
      management_account_id = data.aws_organizations_organization.current.master_account_id
      principal_services    = jsonencode(coalesce(each.value.policies_vars.principal_services, []))
      environment           = var.environment
    })
  )

  tags = merge(
    {
      "Name" = "${each.key}-iam-role"
    },
    var.tags
  )
}

# Attach a new created policy
resource "aws_iam_role_policy" "this" {
  for_each   = { for policies in local.role_policies : "${policies.role_name}-${policies.policy_key}" => policies }
  depends_on = [aws_iam_role.role]

  name = "${each.key}-iam-policy"
  role = aws_iam_role.role[each.value.role_name].name

  # Add here only variables for assume policies.
  policy = templatefile(each.value.policy_path, merge(
    each.value.policies_vars,
    {
      region       = coalesce(each.value.policies_vars.region, data.aws_region.current.name)
      account_id   = coalesce(each.value.policies_vars.account_id, data.aws_caller_identity.current.account_id)
      secrets_name = jsonencode(try(data.aws_secretsmanager_secrets.this[each.value.role_name].arns, null))
      kms_alias    = try(data.aws_kms_alias.this[each.value.role_name].target_key_id, null)
      efs_id       = try(data.aws_efs_file_system.this[each.value.role_name].id, null)
      environment  = var.environment
      #policy_services = jsonencode(coalesce(each.value.policies_vars.policy_services, []))

      ses_identities = try(each.value.policies_vars.ses_identities, null) != null ? jsonencode([
        for ses_name in each.value.policies_vars.ses_identities : "arn:aws:ses:${var.main_region}:${data.aws_caller_identity.current.account_id}:identity/${ses_name}"
      ]) : "[]"

      sns_topics_list = try(each.value.policies_vars.sns_topics_list, null) != null ? jsonencode([
        for topic_name in each.value.policies_vars.sns_topics_list : "arn:aws:sns:*:${coalesce(each.value.policies_vars.sns_account_id, data.aws_caller_identity.current.account_id)}:${topic_name}"
      ]) : "[]"

      sns_publishers_list = try(each.value.policies_vars.sns_publishers_list, null) != null ? jsonencode([
        for topic_name in each.value.policies_vars.sns_publishers_list : "arn:aws:sns:*:${coalesce(each.value.policies_vars.sns_account_id, data.aws_caller_identity.current.account_id)}:${topic_name}"
      ]) : "[]"

      sns_subscribers_list = try(each.value.policies_vars.sns_subscribers_list, null) != null ? jsonencode([
        for topic_name in each.value.policies_vars.sns_subscribers_list : "arn:aws:sns:*:${coalesce(each.value.policies_vars.sns_account_id, data.aws_caller_identity.current.account_id)}:${topic_name}"
      ]) : "[]"

      sqs_queues_list = try(each.value.policies_vars.sqs_queues_list, null) != null ? jsonencode([
        for queue_name in each.value.policies_vars.sqs_queues_list : "arn:aws:sqs:${var.main_region}:${coalesce(each.value.policies_vars.sqs_account_id, data.aws_caller_identity.current.account_id)}:${queue_name}"
      ]) : "[]"

      ecr_repo_list = try(each.value.policies_vars.ecr_repo_list, null) != null ? jsonencode([
        for ecr_name in each.value.policies_vars.ecr_repo_list : "arn:aws:ecr:${var.main_region}:${data.aws_caller_identity.current.account_id}:repository/${data.aws_caller_identity.current.account_id}.dkr.ecr.${var.main_region}.amazonaws.com/${ecr_name}"
      ]) : "[]"

      # These values are generated by pulse_buckets_names.
      pulse_buckets_names_mix = try(each.value.policies_vars.pulse_buckets_names, null) != null ? jsonencode(flatten([
        for bucket_name in each.value.policies_vars.pulse_buckets_names :
        ["arn:aws:s3:::${bucket_name}-${var.main_region}-${var.environment}/*", "arn:aws:s3:::${bucket_name}-${var.main_region}-${var.environment}"]
      ])) : "[]"

      pulse_buckets_names_list = try(each.value.policies_vars.pulse_buckets_names, null) != null ? jsonencode(flatten([
        for bucket_name in each.value.policies_vars.pulse_buckets_names : ["arn:aws:s3:::${bucket_name}-${var.main_region}-${var.environment}"]
      ])) : "[]"

      pulse_buckets_names_content = try(each.value.policies_vars.pulse_buckets_names, null) != null ? jsonencode(flatten([
        for bucket_name in each.value.policies_vars.pulse_buckets_names : ["arn:aws:s3:::${bucket_name}-${var.main_region}-${var.environment}/*"]
      ])) : "[]"

      # These values are generated by bucket_names.
      buckets_names_mix = try(each.value.policies_vars.buckets_names, null) != null ? jsonencode(flatten([
        for bucket_name in each.value.policies_vars.buckets_names : ["arn:aws:s3:::${bucket_name}/*", "arn:aws:s3:::${bucket_name}"]
      ])) : "[]"

      buckets_names_list = try(each.value.policies_vars.buckets_names, null) != null ? jsonencode(flatten([
        for bucket_name in each.value.policies_vars.buckets_names : ["arn:aws:s3:::${bucket_name}"]
      ])) : "[]"

      buckets_names_content = try(each.value.policies_vars.buckets_names, null) != null ? jsonencode(flatten([
        for bucket_name in each.value.policies_vars.buckets_names : ["arn:aws:s3:::${bucket_name}/*"]
      ])) : "[]"
    })
  )
}

# Attach an existent policy
resource "aws_iam_role_policy_attachment" "this" {
  for_each = { for policies in local.role_arns : "${policies.role_name}-${policies.arn_key}" => policies }

  role       = aws_iam_role.role[each.value.role_name].name
  policy_arn = each.value.policy_arn
}

resource "aws_iam_instance_profile" "this" {
  for_each   = { for role in var.roles : role.role_name => role if role.instance_profile }
  depends_on = [aws_iam_role.role]

  name = aws_iam_role.role[each.value.role_name].name
  role = aws_iam_role.role[each.value.role_name].name
}









Carlos Rodríguez
:palm_tree:  Aug 22nd at 10:38 PM
Hi team, @Pete Dias @Alex Dees @Carine Wenyi @Bekhzod Akhrorov
Can you please help me with an approval for this PR: https://github.com/vas-dev/vas-devops-pulse/pull/1361 is related to the missing SNS topic on staging, and the other changes are related to standardizing the sandbox environment (to make sure that we have the same configuration across all environments)
Thanks!
:white_check_mark:
2

11 replies


Alex Dees
  Aug 23rd at 12:06 AM
not now, but i wonder if it is worth thinking about a way to avoid listing all these out multiple times (each env) when in most cases the diff is the endpoint url?
image.png
 
image.png


12:08
yaml?


Carlos Rodríguez
:palm_tree:  Aug 23rd at 12:08 AM
I would say that it should be like that, but since I've checked everything that was in morpheus and then everything that it was on VAS accounts I noticed that there are topics in morpheus that does not exists in VAS for example


Alex Dees
  Aug 23rd at 12:09 AM
yeah i'm just think the apps use a lot of sqs/sns for inter-messaging.  if the app needs it in staging, probably will need in prod too
:white_check_mark:
1



Carlos Rodríguez
:palm_tree:  Aug 23rd at 12:10 AM
Like maybe we can make a common file for the inter messaging topics for apps (same for queues)


Alex Dees
  Aug 23rd at 12:11 AM
that's where my mind was going


Carlos Rodríguez
:palm_tree:  Aug 23rd at 12:11 AM
and we can have in the tfvars the notification channels, because for prod we will have a few topics for notifications that we won't have in staging for example


Alex Dees
  Aug 23rd at 12:11 AM
yeah most will be same, but prob some diffs


Carlos Rodríguez
:palm_tree:  Aug 23rd at 12:12 AM
I think it would be a good improvement


Alex Dees
  Aug 23rd at 12:13 AM
ok let's put it on  the backlog for a rainy day
:laughing:
1



Carlos Rodríguez
:palm_tree:  Aug 23rd at 12:14 AM
We had snow today here :snowflake:







